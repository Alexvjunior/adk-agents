#!/usr/bin/env python3
"""
Team Elo Marketing - Agno Framework
Vanessa (Vendedora) + Eduardo (Especialista em Lembretes)
"""

import os
import logging
import json
import tempfile
import threading
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from dotenv import load_dotenv
from fastapi import FastAPI, Request
from agno.agent import Agent
from agno.team import Team
from agno.models.google import Gemini
from agno.storage.agent.sqlite import SqliteAgentStorage
from agno.tools.googlecalendar import GoogleCalendarTools
from agno.tools.shell import ShellTools
from agno.document.chunking.recursive import RecursiveChunking
from agno.knowledge.agent import AgentKnowledge
from agno.vectordb.chroma import ChromaDb
from agno.document.reader.text_reader import TextReader
from agno.embedder.google import GeminiEmbedder
from pathlib import Path
from evolution_api_tools import EvolutionApiTools

# Carregar vari√°veis de ambiente
load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()


# Sistema de Lembretes Autom√°ticos
class ReminderManager:
    """Gerencia lembretes autom√°ticos para agendamentos"""
    
    def __init__(self):
        self.scheduled_reminders: Dict[str, List[threading.Timer]] = {}
        self.appointments: Dict[str, dict] = {}  # Armazena dados dos agendamentos
        
    def schedule_appointment_reminders(
        self, 
        remote_jid: str, 
        appointment_datetime: datetime,
        evolution_tools: EvolutionApiTools,
        client_name: str = "Cliente"
    ):
        """Agenda lembretes para um agendamento"""
        
        # Cancelar lembretes anteriores se existirem
        self.cancel_reminders(remote_jid)
        
        # Armazenar dados do agendamento
        self.appointments[remote_jid] = {
            "datetime": appointment_datetime,
            "client_name": client_name,
            "created_at": datetime.now()
        }
        
        # Calcular hor√°rios dos lembretes
        reminders = []
        now = datetime.now()
        
        # Lembrete 1: 24h antes (se agendamento for mais de 24h no futuro)
        reminder_24h = appointment_datetime - timedelta(hours=24)
        if reminder_24h > now:
            delay_24h = (reminder_24h - now).total_seconds()
            if delay_24h > 0:
                timer_24h = threading.Timer(
                    delay_24h,
                    self._send_24h_reminder,
                    args=[remote_jid, evolution_tools, appointment_datetime, client_name]
                )
                reminders.append(timer_24h)
                timer_24h.start()
                logger.info(f"üìÖ Lembrete 24h agendado para {remote_jid} em {delay_24h/3600:.1f} horas")
        
        # Lembrete 2: 1h antes
        reminder_1h = appointment_datetime - timedelta(hours=1)
        if reminder_1h > now:
            delay_1h = (reminder_1h - now).total_seconds()
            if delay_1h > 0:
                timer_1h = threading.Timer(
                    delay_1h,
                    self._send_1h_reminder,
                    args=[remote_jid, evolution_tools, appointment_datetime, client_name]
                )
                reminders.append(timer_1h)
                timer_1h.start()
                logger.info(f"‚è∞ Lembrete 1h agendado para {remote_jid} em {delay_1h/3600:.1f} horas")
        
        # Lembrete 3: 10 minutos antes
        reminder_10m = appointment_datetime - timedelta(minutes=10)
        if reminder_10m > now:
            delay_10m = (reminder_10m - now).total_seconds()
            if delay_10m > 0:
                timer_10m = threading.Timer(
                    delay_10m,
                    self._send_10m_reminder,
                    args=[remote_jid, evolution_tools, appointment_datetime, client_name]
                )
                reminders.append(timer_10m)
                timer_10m.start()
                logger.info(f"‚è±Ô∏è Lembrete 10min agendado para {remote_jid} em {delay_10m/60:.1f} minutos")
        
        # Armazenar todos os timers
        self.scheduled_reminders[remote_jid] = reminders
        
        logger.info(f"‚úÖ {len(reminders)} lembretes agendados para {remote_jid}")
    
    def cancel_reminders(self, remote_jid: str):
        """Cancela todos os lembretes de um cliente"""
        if remote_jid in self.scheduled_reminders:
            for timer in self.scheduled_reminders[remote_jid]:
                timer.cancel()
            del self.scheduled_reminders[remote_jid]
            logger.info(f"‚ùå Lembretes cancelados para {remote_jid}")
    
    def _send_24h_reminder(self, remote_jid: str, evolution_tools, appointment_dt: datetime, client_name: str):
        """Envia lembrete 24h antes com confirma√ß√£o"""
        try:
            number = remote_jid.replace("@s.whatsapp.net", "")
            formatted_time = appointment_dt.strftime("%d/%m √†s %H:%M")
            
            # Gerar link do Google Meet
            meet_link = self._generate_meet_link(appointment_dt, client_name)
            
            message = (f"Oi {client_name}! "
                      f"Lembra da nossa conversa sobre marketing digital? "
                      f"Sua reuni√£o com Eduardo est√° marcada para amanh√£ ({formatted_time}). "
                      f"\n\nS√≥ me confirma se est√° tudo certo? "
                      f"Se conseguir ir, s√≥ responder 'sim'. "
                      f"Se n√£o rolar, me avisa que a gente remarca numa boa! "
                      f"\n\nAh, e se prepare que o Eduardo vai te mostrar uns cases bem legais!")
            
            evolution_tools.send_text_message(number=number, text=message)
            logger.info(f"üìÖ Lembrete 24h (confirma√ß√£o) enviado para {number}")
            
            # Armazenar que estamos aguardando confirma√ß√£o
            self.appointments[remote_jid]["awaiting_confirmation"] = True
            self.appointments[remote_jid]["meet_link"] = meet_link
            
        except Exception as e:
            logger.error(f"‚ùå Erro no lembrete 24h para {remote_jid}: {e}")
    
    def _send_1h_reminder(self, remote_jid: str, evolution_tools, appointment_dt: datetime, client_name: str):
        """Envia lembrete 1h antes com link do Meet"""
        try:
            number = remote_jid.replace("@s.whatsapp.net", "")
            formatted_time = appointment_dt.strftime("%H:%M")
            
            # Buscar link do Meet
            meet_link = self.appointments.get(remote_jid, {}).get("meet_link", "")
            
            message = (f"E a√≠ {client_name}! "
                      f"Falta s√≥ 1 hora para nossa reuni√£o ({formatted_time})! "
                      f"\n\nJ√° deixei o link pronto aqui:\n{meet_link}"
                      f"\n\n√â s√≥ entrar no hor√°rio. "
                      f"Ah, e tenha em m√£os as informa√ß√µes do seu restaurante que vai ser bem √∫til!")
            
            evolution_tools.send_text_message(number=number, text=message)
            logger.info(f"‚è∞ Lembrete 1h enviado para {number}")
            
        except Exception as e:
            logger.error(f"‚ùå Erro no lembrete 1h para {remote_jid}: {e}")
    
    def _send_10m_reminder(self, remote_jid: str, evolution_tools, appointment_dt: datetime, client_name: str):
        """Envia lembrete 10min antes"""
        try:
            number = remote_jid.replace("@s.whatsapp.net", "")
            
            # Buscar link do Meet
            meet_link = self.appointments.get(remote_jid, {}).get("meet_link", "")
            
            message = (f"√öltimos 10 minutos, {client_name}! "
                      f"\n\n√â agora! Pode entrar no link:\n{meet_link}"
                      f"\n\nEduardo j√° est√° te esperando. "
                      f"Vai ser demais te mostrar como nossos clientes conseguiram esses resultados!")
            
            evolution_tools.send_text_message(number=number, text=message)
            logger.info(f"‚è±Ô∏è Lembrete 10min enviado para {number}")
            
        except Exception as e:
            logger.error(f"‚ùå Erro no lembrete 10min para {remote_jid}: {e}")
    
    def _generate_meet_link(self, appointment_dt: datetime, client_name: str) -> str:
        """Gera link do Google Meet para a reuni√£o"""
        try:
            # Para esta demo, vamos usar um link fixo do Meet
            # Em produ√ß√£o, isso seria integrado com Google Calendar API
            base_meet_url = "https://meet.google.com/lookup/"
            
            # Gerar c√≥digo √∫nico baseado na data e cliente
            import hashlib
            unique_data = f"{appointment_dt.isoformat()}-{client_name}-elo-marketing"
            meet_code = hashlib.md5(unique_data.encode()).hexdigest()[:10]
            
            # Link personalizado (em produ√ß√£o seria criado via Google Calendar)
            meet_link = f"{base_meet_url}{meet_code}"
            
            logger.info(f"üìû Link do Meet gerado para {client_name}: {meet_link}")
            return meet_link
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar link do Meet: {e}")
            return "https://meet.google.com/new"  # Link padr√£o como fallback
    
    def handle_confirmation_response(self, remote_jid: str, message: str, evolution_tools) -> bool:
        """Processa resposta de confirma√ß√£o do cliente"""
        try:
            if remote_jid not in self.appointments:
                return False
                
            appointment = self.appointments[remote_jid]
            if not appointment.get("awaiting_confirmation", False):
                return False
            
            message_lower = message.lower().strip()
            number = remote_jid.replace("@s.whatsapp.net", "")
            client_name = appointment.get("client_name", "Cliente")
            meet_link = appointment.get("meet_link", "")
            
            if any(word in message_lower for word in ["sim", "confirmo", "vou", "participar", "ok"]):
                # Confirma√ß√£o positiva
                appointment["confirmed"] = True
                appointment["awaiting_confirmation"] = False
                
                confirmation_msg = (f"Perfeito, {client_name}! "
                                   f"Anotado aqui que voc√™ vem amanh√£. "
                                   f"\n\nJ√° deixo o link da reuni√£o salvo para voc√™:\n{meet_link}"
                                   f"\n\nVou te lembrar uma hora antes tamb√©m. "
                                   f"At√© amanh√£ √†s {appointment['datetime'].strftime('%H:%M')}!")
                
                evolution_tools.send_text_message(number=number, text=confirmation_msg)
                logger.info(f"‚úÖ Agendamento confirmado para {client_name}")
                return True
                
            elif any(word in message_lower for word in ["n√£o", "nao", "cancelar", "remarcar", "outro"]):
                # Cancelamento ou remarca√ß√£o
                appointment["confirmed"] = False
                appointment["awaiting_confirmation"] = False
                
                # Cancelar lembretes restantes
                self.cancel_reminders(remote_jid)
                
                reschedule_msg = (f"Tranquilo, {client_name}! "
                                 f"Sem problemas. Quando voc√™ tiver um tempo melhor me avisa. "
                                 f"Que dia e hor√°rio seria bom para voc√™?")
                
                evolution_tools.send_text_message(number=number, text=reschedule_msg)
                logger.info(f"üìÖ Agendamento cancelado para remarca√ß√£o: {client_name}")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar confirma√ß√£o: {e}")
            return False
    
    def parse_appointment_datetime(self, message: str) -> Optional[datetime]:
        """Extrai data/hora do agendamento da mensagem"""
        try:
            # Buscar padr√µes comuns de data/hora nas mensagens
            import re
            
            # Padr√£o: "amanh√£ √†s 14h" ou "amanh√£ √†s 14:00"
            tomorrow_pattern = r"amanh√£ √†s (\d{1,2})(?::(\d{2}))?h?"
            match = re.search(tomorrow_pattern, message.lower())
            if match:
                hour = int(match.group(1))
                minute = int(match.group(2)) if match.group(2) else 0
                tomorrow = datetime.now() + timedelta(days=1)
                return tomorrow.replace(hour=hour, minute=minute, second=0, microsecond=0)
            
            # Padr√£o: "hoje √†s 15h"
            today_pattern = r"hoje √†s (\d{1,2})(?::(\d{2}))?h?"
            match = re.search(today_pattern, message.lower())
            if match:
                hour = int(match.group(1))
                minute = int(match.group(2)) if match.group(2) else 0
                today = datetime.now()
                return today.replace(hour=hour, minute=minute, second=0, microsecond=0)
            
            # Padr√£o: "14/12 √†s 10h" ou "14/12 √†s 10:30"
            date_pattern = r"(\d{1,2})/(\d{1,2}) √†s (\d{1,2})(?::(\d{2}))?h?"
            match = re.search(date_pattern, message.lower())
            if match:
                day = int(match.group(1))
                month = int(match.group(2))
                hour = int(match.group(3))
                minute = int(match.group(4)) if match.group(4) else 0
                year = datetime.now().year
                return datetime(year, month, day, hour, minute)
            
            logger.warning(f"N√£o foi poss√≠vel extrair data/hora de: {message}")
            return None
            
        except Exception as e:
            logger.error(f"Erro ao extrair data/hora: {e}")
            return None


# Inst√¢ncia global do gerenciador de lembretes
reminder_manager = ReminderManager()


# Usar vari√°vel de ambiente para Google API Key
google_api_key = os.getenv("GOOGLE_API_KEY", 
                           "AIzaSyD9tPWukHuZFFbSNjTNfuIbH_PQwa3uEZQ")
os.environ["GOOGLE_API_KEY"] = google_api_key

storage = SqliteAgentStorage(table_name="team_sessions", db_file="team_sessions.db")


agent_knowledge = AgentKnowledge(

    vector_db=ChromaDb(
        collection="elo_marketing_knowledge",
        embedder=GeminiEmbedder(
            id="text-embedding-004",  # Modelo de embedding do Google
            # Usa sua API key existente
            api_key=os.environ.get("GOOGLE_API_KEY")
        ),
        path="knowledge_db",
        persistent_client=True,
    ),
    chunking_strategy=RecursiveChunking(
        chunk_size=1000,
        overlap=100
    ),
    num_documents=5,
)

# Carregar documentos
reader = TextReader(chunk=True)
knowledge_dir = Path("knowledge/")
for file_path in knowledge_dir.iterdir():
    if file_path.is_file() and file_path.suffix == '.txt':
        logger.info(f"Processando arquivo: {file_path}")
        documents = reader.read(file_path)
        for doc in documents:
            agent_knowledge.add_document_to_knowledge_base(document=doc)


def create_google_calendar_tools():
    """Cria GoogleCalendarTools usando vari√°veis de ambiente"""
    try:
        credentials_dict = {
            "installed": {
                "client_id": os.getenv("GOOGLE_CLIENT_ID"),
                "project_id": os.getenv("GOOGLE_PROJECT_ID"),
                "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                "token_uri": "https://oauth2.googleapis.com/token",
                "auth_provider_x509_cert_url": (
                    "https://www.googleapis.com/oauth2/v1/certs"
                ),
                "client_secret": os.getenv("GOOGLE_CLIENT_SECRET"),
                "redirect_uris": [
                    "http://localhost", 
                    "https://agentes-agents.iaz7eb.easypanel.host/"
                ]
            }
        }
        
        token_dict = {
            "refresh_token": os.getenv("GOOGLE_REFRESH_TOKEN"),
            "token_uri": "https://oauth2.googleapis.com/token",
            "client_id": os.getenv("GOOGLE_CLIENT_ID"),
            "client_secret": os.getenv("GOOGLE_CLIENT_SECRET"),
            "scopes": ["https://www.googleapis.com/auth/calendar"],
            "universe_domain": "googleapis.com"
        }
        
        with tempfile.NamedTemporaryFile(
            mode='w', suffix='.json', delete=False
        ) as credentials_file:
            json.dump(credentials_dict, credentials_file)
            credentials_path = credentials_file.name
            
        with tempfile.NamedTemporaryFile(
            mode='w', suffix='.json', delete=False
        ) as token_file:
            json.dump(token_dict, token_file)
            token_path = token_file.name
        
        return GoogleCalendarTools(
            credentials_path=credentials_path,
            token_path=token_path,
        )
        
    except Exception as e:
        logger.error(f"Erro ao criar GoogleCalendarTools: {e}")
        return None


# Ferramentas comuns
calendar = create_google_calendar_tools()
shell_tools = ShellTools(base_dir=Path("."))

# Evolution API Tools com credenciais diretas
evolution_tools = None
try:
    evolution_tools = EvolutionApiTools(
        server_url="https://evolution-api-evolution-api.iaz7eb.easypanel.host",
        api_key="88B69AFEDA22-4836-858D-72852AA04B1F",
        instance="Dudu Numero N√£o Usando"
    )
    logger.info("‚úÖ Evolution API Tools criada com sucesso")
except Exception as e:
    logger.error(f"‚ùå Erro ao criar Evolution API Tools: {e}")
    logger.warning("‚ö†Ô∏è Continuando sem Evolution API Tools")

# Ferramentas para os agentes
tools = [shell_tools]
if calendar:
    tools.append(calendar)
if evolution_tools:
    tools.append(evolution_tools)


# AGENTE 1: VANESSA - VENDEDORA
vanessa = Agent(
    name="Vanessa",
    role="Vendedora da Elo Marketing especializada em restaurantes",
    model=Gemini(id="gemini-2.0-flash"),
    storage=storage,
    tools=tools,
    knowledge=agent_knowledge,
    add_history_to_messages=True,
    instructions=[
        "Voc√™ √© Vanessa, da Elo Marketing, vendedora especializada em restaurantes.",
        "",
        "üéØ SEU OBJETIVO: Seguir EXATAMENTE o script das conversas reais analisadas.",
        "",
        "üìã SCRIPT OBRIGAT√ìRIO DAS CONVERSAS REAIS:",
        "",
        "ABERTURA PADR√ÉO (j√° foi enviada por outro sistema):",
        "'Oi, √© do Restaurante? Voc√™s t√™m card√°pio ou menu online?'",
        "",
        "QUANDO CLIENTE RESPONDER 'SIM':",
        "Use EXATAMENTE esta resposta atacante das conversas reais:",
        "",
        "'Tudo bem? üòâ Aqui √© a Vanessa. J√° faz um tempinho que estou querendo falar com voc√™s! Eu trabalho ajudando restaurantes a aumentarem suas vendas atraindo clientes de forma consistente, aumentar a reten√ß√£o e superar os desafios da sazonalidade. Atrav√©s de automa√ß√µes e an√∫ncios. Tivemos um crescimento deste restaurante nos √∫ltimos meses. Conseguimos faturar mais de R$ 877.000 com um investimento de pouco mais de R$ 7 mil s√≥ em fevereiro. Crescimento de 300% em rela√ß√£o ao ano passado. √â com voc√™ mesmo que eu falo sobre esse tema?'",
        "",
        "QUANDO CLIENTE DEMONSTRAR INTERESSE:",
        "Ofere√ßa agendamento EXATAMENTE como nas conversas reais:",
        "'Voc√™ topa agendar um breve bate-papo com um especialista da nossa equipe para que ele mostre um pouco mais sobre o que n√≥s fazemos para restaurantes venderem mais ao longo do ano todo?'",
        "",
        "SE ACEITAR AGENDAMENTO:",
        "1. '√ìtimo! Deixe-me verificar a agenda...'",
        "2. OBRIGAT√ìRIO: Use list_events do Google Calendar para verificar disponibilidade",
        "3. Sugira hor√°rios espec√≠ficos dispon√≠veis",
        "4. Colete nome completo, nome do restaurante e email",
        "5. Crie evento no Google Calendar",
        "6. Confirme: 'Marcado! Nossa reuni√£o ficou agendada...'",
        "",
        "üìä N√öMEROS CORRETOS (das conversas reais):",
        "- R$ 877.000 em faturamento",
        "- Crescimento de 300%",
        "- Investimento de R$ 7 mil",
        "",
        "üöÄ SEJA ATACANTE como nas conversas reais:",
        "- Apresente n√∫meros IMEDIATAMENTE",
        "- Conduza a conversa com AUTORIDADE",
        "- Use prova social constantemente",
        "- N√ÉO seja passiva - VOC√ä guia o processo",
        "",
        "üì± FERRAMENTAS DISPON√çVEIS:",
        "- send_text_message: enviar mensagens via WhatsApp",
        "- send_media_message: enviar imagens (relatorio.jpg, visualizacao.jpg)",
        "- list_events: verificar agenda do Google Calendar",
        "- create_event: criar eventos no Google Calendar",
        "- shell_tools: obter data atual",
        "",
        "üéØ FOQUE APENAS: Seguir script das conversas reais ‚Üí Agendar reuni√£o",
        "",
        "‚úÖ SEMPRE FA√áA:",
        "- Consulte o FAQ antes de responder",
        "- Use as respostas exatas do FAQ",
        "- Foque no agendamento com Eduardo",
        "- Seja objetiva e direta",
        "",
        "üöÄ REGRAS ATACANTES:",
        "1. NUNCA seja passiva - SEMPRE conduza a conversa",
        "2. Apresente n√∫meros e resultados do FAQ IMEDIATAMENTE",
        "3. N√ÉO espere o cliente perguntar - VOC√ä informa proativamente",
        "4. Use prova social e casos de sucesso constantemente",
        "5. Crie senso de urg√™ncia e oportunidade",
        "6. Guie direto para o agendamento ap√≥s despertar interesse",
        "",
        "üì± FERRAMENTAS DE WHATSAPP DISPON√çVEIS:",
        "- Use send_text_message para enviar mensagens de texto via WhatsApp",
        "- Use send_media_message para enviar imagens, v√≠deos ou documentos",
        "- Use check_whatsapp_number para verificar se um n√∫mero est√° no WhatsApp",
        "- Formato de n√∫mero: 5548999999999 (c√≥digo pa√≠s + DDD + n√∫mero)",
        "- Para enviar imagens, use a ferramenta send_media_message com media_type='image'",
        "",
        "üéØ IMPORTANTE - USO ATIVO DAS FERRAMENTAS WHATSAPP:",
        "SEMPRE que o cliente demonstrar interesse ou quando apropriado:",
        "1. ENVIE mensagens de follow-up via WhatsApp usando send_text_message",
        "2. ENVIE relat√≥rios e visualiza√ß√µes via send_media_message quando falar de resultados",
        "3. IMAGENS DISPON√çVEIS na pasta knowledge para enviar:",
        "   - 'knowledge/relatorio.jpg' - Relat√≥rio de resultados dos clientes",
        "   - 'knowledge/visualizacao.jpg' - Gr√°fico de visualiza√ß√µes e crescimento",
        "",
        "üìä QUANDO ENVIAR IMAGENS VIA WHATSAPP:",
        "- Ao mencionar resultados de R$ 877.000: ENVIE knowledge/relatorio.jpg",
        "- Ao falar de crescimento de 300%: ENVIE knowledge/visualizacao.jpg", 
        "- Use caption explicativa: 'Aqui est√£o os resultados reais dos nossos clientes'",
        "",
        "üí¨ ESTRAT√âGIA DE MENSAGENS WHATSAPP:",
        "- Ap√≥s resposta interessada: ENVIE mensagem de follow-up",
        "- Ap√≥s apresentar pitch: ENVIE comprova√ß√£o visual (imagens)",
        "- Antes de agendar: ENVIE resumo dos benef√≠cios",
        "- SEMPRE use as ferramentas para engajar ativamente o cliente",
        "",
        "üö® REGRA CR√çTICA - FERRAMENTAS WHATSAPP:",
        "- N√ÉO apenas responda, TAMB√âM aja usando as ferramentas",
        "- SEMPRE que falar de resultados, COMPROVE com imagens via WhatsApp",
        "- SEJA PROATIVA: envie materiais sem o cliente pedir",
        "- MANTENHA o cliente engajado com conte√∫do visual",
        "",
        "üìÜ GOOGLE CALENDAR:",
        "OBRIGAT√ìRIO ao agendar:",
        "1. Use create_event do Google Calendar",
        "2. T√≠tulo: 'Reuni√£o Elo Marketing - [Nome do Cliente]'",
        "3. Dura√ß√£o: 1 hora",
        "4. Timezone: 'America/Sao_Paulo'",
        "5. Inclua tag: AGENDAMENTO_REALIZADO: [data/hora] com [nome]",
        "",
        "üéØ FOCO TOTAL: CAPTURA DE LEADS ‚Üí AGENDAMENTO COM EDUARDO",
        "",
        "Sempre consulte sua base de conhecimento para respostas precisas do FAQ."
    ],
    markdown=True,
    show_tool_calls=False,
)


# AGENTE 2: EDUARDO - ESPECIALISTA EM LEMBRETES
eduardo = Agent(
    name="Eduardo",
    role="Especialista da Elo Marketing respons√°vel por lembretes e reuni√µes",
    model=Gemini(id="gemini-2.0-flash"),
    storage=storage,
    tools=tools,
    knowledge=agent_knowledge,
    add_history_to_messages=True,
    instructions=[
        "Voc√™ √© Eduardo, especialista da Elo Marketing em marketing digital para restaurantes.",
        "",
        "üéØ RESPONSABILIDADES:",
        "- Gerenciar lembretes de agendamentos",
        "- Confirmar reuni√µes com clientes",
        "- Realizar reuni√µes de apresenta√ß√£o",
        "- Acompanhar clientes p√≥s-agendamento",
        "",
        "üìÖ SISTEMA DE LEMBRETES:",
        "Voc√™ √© respons√°vel pelos lembretes autom√°ticos:",
        "- 24h antes: Lembrete de prepara√ß√£o",
        "- 1h antes: Confirma√ß√£o final",
        "- 10min antes: Aviso de in√≠cio",
        "",
        "üíº ESPECIALIZA√á√ÉO:",
        "- Marketing digital para restaurantes",
        "- Estrat√©gias de crescimento de vendas",
        "- Cases de sucesso (R$ 877.000 em resultados)",
        "- ROI e investimentos em marketing",
        "",
        "üó£Ô∏è COMUNICA√á√ÉO:",
        "- Seja profissional mas amig√°vel",
        "- Demonstre expertise em marketing",
        "- Use dados e resultados reais",
        "- Foque em solu√ß√µes pr√°ticas",
        "",
        "üì± FERRAMENTAS:",
        "- send_text_message: comunica√ß√£o via WhatsApp",
        "- send_media_message: compartilhar materiais",
        "- GoogleCalendar: gerenciar agendamentos",
        "",
        "Voc√™ trabalha em EQUIPE com Vanessa. Ela capta leads, voc√™ realiza as reuni√µes."
    ],
    markdown=True,
    show_tool_calls=False,
)


# TEAM ELO MARKETING
elo_team = Team(
    members=[vanessa, eduardo],
    model=Gemini(id="gemini-2.0-flash"),
    instructions=[
        "Voc√™s s√£o o Team Elo Marketing especializado em restaurantes.",
        "",
        "üö® REGRA CR√çTICA DE ORDEM:",
        "VANESSA SEMPRE responde PRIMEIRO em qualquer conversa.",
        "Eduardo S√ì responde quando h√° agendamento espec√≠fico ou lembretes.",
        "",
        "üë• DIVIS√ÉO DE RESPONSABILIDADES:",
        "",
        "üéØ VANESSA (Vendedora) - SEMPRE PRIMEIRA A RESPONDER:",
        "- TODA primeira abordagem com leads",
        "- Apresenta√ß√£o inicial dos resultados R$ 877.000",
        "- Capta√ß√£o e qualifica√ß√£o de leads",
        "- Agendamento de reuni√µes com Eduardo",
        "- Script atacante baseado nas conversas reais",
        "",
        "üíº EDUARDO (Especialista) - S√ì QUANDO NECESS√ÅRIO:",
        "- Reuni√µes de apresenta√ß√£o t√©cnica (AP√ìS agendamento)",
        "- Lembretes autom√°ticos de agendamentos",
        "- Acompanhamento p√≥s-reuni√£o",
        "- Fechamento de contratos",
        "",
        "üîÑ FLUXO OBRIGAT√ìRIO:",
        "1. Cliente envia mensagem ‚Üí VANESSA responde SEMPRE",
        "2. Vanessa segue script das conversas reais",
        "3. Vanessa qualifica lead e agenda com Eduardo",
        "4. Eduardo assume APENAS ap√≥s agendamento confirmado",
        "5. Eduardo gerencia lembretes e reuni√£o",
        "",
        "üìä DADOS COMPARTILHADOS:",
        "- R$ 877.000 em resultados para clientes (das conversas reais)",
        "- Crescimento de 300% nas vendas",
        "- 19 anos de experi√™ncia",
        "- Especializa√ß√£o em restaurantes",
        "",
        "üéØ OBJETIVO COMUM:",
        "Converter leads em clientes atrav√©s de Vanessa PRIMEIRO, Eduardo depois."
    ],
    show_tool_calls=False,
)


def extract_evolution_data(data):
    """Extrai dados da Evolution API"""
    try:
        if isinstance(data, dict):
            message = None
            audio_base64 = None
            image_base64 = None
            message_type = 'text'
            remote_jid = None
            push_name = None
            instance = None

            # Novo formato com 'query' e 'inputs'
            if 'query' in data and 'inputs' in data:
                message = data['query']
                message_type = 'text'
                inputs = data['inputs']
                if isinstance(inputs, dict):
                    remote_jid = inputs.get('remoteJid', 'unknown')
                    push_name = inputs.get('pushName', 'Cliente')
                    instance = inputs.get('instanceName', 'default')

            # Mensagem de imagem
            elif ('message' in data and isinstance(data['message'], dict) and
                    'imageMessage' in data['message'] and 
                    'base64' in data['message']):
                image_base64 = data['message']['base64']
                message_type = 'image'

            # Mensagem de √°udio
            elif ('message' in data and isinstance(data['message'], dict) and
                    'audioMessage' in data['message'] and 
                    'base64' in data['message']):
                audio_base64 = data['message']['base64']
                message_type = 'audio'

            # Texto normal
            elif 'message' in data and isinstance(data['message'], dict):
                if 'conversation' in data['message']:
                    message = data['message']['conversation']
                elif 'text' in data['message']:
                    message = data['message']['text']

            elif 'text' in data:
                message = data['text']
            elif 'message' in data and isinstance(data['message'], str):
                message = data['message']
            elif 'question' in data:
                message = data['question']

            # Extrair informa√ß√µes do remetente
            if not remote_jid:
                if 'key' in data and isinstance(data['key'], dict):
                    remote_jid = data['key'].get('remoteJid', 'unknown')
                elif 'from' in data:
                    remote_jid = data['from']
                elif 'user' in data:
                    remote_jid = data['user']

            if not push_name:
                if 'pushName' in data:
                    push_name = data['pushName']
                elif 'sender_name' in data:
                    push_name = data['sender_name']

            if not instance:
                if 'instanceId' in data:
                    instance = data['instanceId']
                elif 'instance' in data:
                    instance = data['instance']

            return {
                'message': message,
                'audio_base64': audio_base64,
                'image_base64': image_base64,
                'message_type': message_type,
                'remote_jid': remote_jid or 'unknown',
                'push_name': push_name or 'Cliente',
                'instance': instance or 'default'
            }

    except Exception as e:
        logger.error(f"Erro ao extrair dados da Evolution: {e}")

    return None


@app.get("/")
async def root():
    return {
        "message": "Team Elo Marketing - Vanessa + Eduardo",
        "description": "Sistema inteligente com vendedora e especialista",
        "team_members": [
            {
                "name": "Vanessa",
                "role": "Vendedora especializada em restaurantes",
                "responsibilities": [
                    "Capta√ß√£o de leads",
                    "Qualifica√ß√£o de prospects",
                    "Agendamento de reuni√µes"
                ]
            },
            {
                "name": "Eduardo", 
                "role": "Especialista em marketing e lembretes",
                "responsibilities": [
                    "Reuni√µes t√©cnicas",
                    "Lembretes autom√°ticos",
                    "Fechamento de vendas"
                ]
            }
        ],
        "features": [
            "Lembretes autom√°ticos (24h, 1h, 10min antes)",
            "Detec√ß√£o autom√°tica de agendamentos",
            "Divis√£o inteligente de responsabilidades",
            "Integra√ß√£o completa com WhatsApp"
        ],
        "endpoints": {
            "/team": "Conversa com o Team Elo Marketing",
            "/status": "Status do sistema"
        }
    }


@app.post("/ask")
async def team_conversation(request: Request):
    """Conversa com o Team Elo Marketing"""
    try:
        body = await request.body()
        logger.info("üì• DADOS RECEBIDOS DO TEAM:")
        logger.info(f"   - Body: {body}")

        data = await request.json()
        evolution_data = extract_evolution_data(data)

        if not evolution_data:
            return {"error": "Dados n√£o conseguiram ser extra√≠dos"}

        remote_jid = evolution_data['remote_jid']
        push_name = evolution_data['push_name']
        message_type = evolution_data['message_type']
        
        # Session ID baseado no remote_jid
        session_id = f"team-{remote_jid}"

        logger.info(f"üë• Team processando mensagem de {push_name} ({remote_jid})")

        # Verificar se √© a primeira intera√ß√£o e adicionar mensagem de abertura ao hist√≥rico
        try:
            # Buscar hist√≥rico existente
            existing_session = storage.read(session_id)
            
            # Se n√£o h√° hist√≥rico, significa que √© a primeira resposta do cliente
            # Ent√£o adicionamos a mensagem de abertura que foi enviada por outro sistema
            if not existing_session or len(existing_session.messages) == 0:
                logger.info(f"üìù Primeira intera√ß√£o detectada para {push_name} - adicionando abertura ao hist√≥rico")
                
                # Simular que a Vanessa enviou a mensagem de abertura
                opening_message = "Oi, √© do Restaurante? Voc√™s t√™m card√°pio ou menu online?"
                
                # Executar primeiro com a mensagem de abertura para criar o hist√≥rico
                vanessa.run(opening_message, session_id=session_id)
                
                logger.info(f"‚úÖ Mensagem de abertura adicionada ao hist√≥rico de {push_name}")
        
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao verificar/adicionar hist√≥rico: {e}")

        # Processar com APENAS a Vanessa (evitar confus√£o do Team)
        if message_type == 'image' and evolution_data['image_base64']:
            response = vanessa.run(
                images=[evolution_data['image_base64']], 
                session_id=session_id
            )
        elif message_type == 'audio' and evolution_data['audio_base64']:
            response = vanessa.run(
                audio=evolution_data['audio_base64'], 
                session_id=session_id
            )
        else:
            response = vanessa.run(
                evolution_data['message'], 
                session_id=session_id
            )

        # Extrair conte√∫do da resposta
        if response is None:
            message = "Erro: Resposta vazia do team"
        elif hasattr(response, 'content') and response.content:
            message = response.content
        else:
            message = str(response) if response else "Erro: Resposta inv√°lida"

        # Verificar se houve agendamento na resposta
        if "AGENDAMENTO_REALIZADO:" in message:
            logger.info("üìÖ AGENDAMENTO DETECTADO PELO TEAM!")
            
            # Extrair informa√ß√µes do agendamento
            appointment_datetime = reminder_manager.parse_appointment_datetime(message)
            
            if appointment_datetime:
                # Agendar lembretes autom√°ticos
                reminder_manager.schedule_appointment_reminders(
                    remote_jid=remote_jid,
                    appointment_datetime=appointment_datetime,
                    evolution_tools=evolution_tools,
                    client_name=push_name
                )
                
                logger.info(f"‚úÖ Lembretes agendados para {push_name} - {appointment_datetime}")
                
                # Enviar confirma√ß√£o imediata
                try:
                    number = remote_jid.replace("@s.whatsapp.net", "")
                    confirmation = (f"‚úÖ Perfeito {push_name}! Sua reuni√£o com Eduardo foi "
                                   f"confirmada. Voc√™ receber√° lembretes autom√°ticos antes "
                                   f"do nosso encontro. Aguarde!")
                    
                    evolution_tools.send_text_message(number=number, text=confirmation)
                    logger.info(f"üì§ Confirma√ß√£o de agendamento enviada para {number}")
                except Exception as e:
                    logger.error(f"‚ùå Erro na confirma√ß√£o: {e}")

        # Processar resposta de confirma√ß√£o do cliente
        if remote_jid in reminder_manager.appointments and reminder_manager.appointments[remote_jid].get("awaiting_confirmation", False):
            if reminder_manager.handle_confirmation_response(remote_jid, message, evolution_tools):
                logger.info(f"‚úÖ Confirma√ß√£o de agendamento processada para {push_name}")

        logger.info(f"‚úÖ Team respondeu com sucesso (tamanho: {len(message)})")

        return {"message": message}

    except Exception as e:
        logger.error(f"‚ùå Erro na conversa com o team: {str(e)}")
        return {"error": f"Erro ao processar conversa: {str(e)}"}


@app.get("/status")
async def status():
    """Status do Team Elo Marketing"""
    return {
        "status": "Team ativo",
        "members": ["Vanessa (Vendedora)", "Eduardo (Especialista)"],
        "active_reminders": len(reminder_manager.scheduled_reminders),
        "appointments": len(reminder_manager.appointments),
        "features": [
            "Capta√ß√£o inteligente de leads",
            "Agendamentos autom√°ticos",
            "Lembretes em 24h, 1h e 10min",
            "Divis√£o de responsabilidades",
            "Base de conhecimento compartilhada"
        ]
    }


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8081) 