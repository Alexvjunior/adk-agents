import os
import requests
import logging
from fastapi import FastAPI, Request
from pydantic import BaseModel
from agno.agent import Agent
from agno.models.google import Gemini

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# =====================
# API com FastAPI + Agno - Sara (Direito M√©dico)
# =====================
app = FastAPI()

# Configurar a API key do Gemini (pode tamb√©m usar vari√°vel de ambiente)
os.environ["GOOGLE_API_KEY"] = "AIzaSyD9tPWukHuZFFbSNjTNfuIbH_PQwa3uEZQ"

# Criar agente Sara Sara - Especialista em Direito M√©dico
sara = Agent(
    name="Sara", 
    role="Especialista em Direito M√©dico e da Sa√∫de",
    model=Gemini(id="gemini-1.5-flash"),
    instructions=[
        "Voc√™ √© Sara, uma especialista em direito m√©dico e da sa√∫de.",
        "Responda APENAS perguntas relacionadas a:",
        "- Direito m√©dico",
        "- Direito da sa√∫de",
        "- Responsabilidade civil m√©dica",
        "- Erro m√©dico",
        "- Consentimento informado",
        "- Prontu√°rio m√©dico",
        "- Sigilo m√©dico",
        "- √âtica m√©dico",
        "- Legisla√ß√£o em sa√∫de",
        "- Regulamenta√ß√£o de profiss√µes da sa√∫de",
        "- Direito do paciente",
        "- Planos de sa√∫de",
        "- Vigil√¢ncia sanit√°ria",
        "- Bio√©tica e biodireito",
        "",
        "Para perguntas fora desses temas, responda:",
        "'Desculpe, sou especializada apenas em direito m√©dico e da sa√∫de. Por favor, fa√ßa perguntas relacionadas a esses temas.'",
        "",
        "Sempre cite a legisla√ß√£o brasileira quando aplic√°vel (C√≥digo Civil, C√≥digo de √âtica M√©dica, Lei 8.080/90, etc.)",
        "Seja precisa, t√©cnica e did√°tica nas explica√ß√µes.",
        "Use exemplos pr√°ticos quando apropriado."
    ],
    markdown=True,
    show_tool_calls=False,
)

# Agente Sara Pro para an√°lises mais complexas
sara_pro = Agent(
    name="Sara Pro", 
    role="Especialista S√™nior em Direito M√©dico e da Sa√∫de",
    model=Gemini(id="gemini-1.5-pro"),
    instructions=[
        "Voc√™ √© Sara Pro, uma especialista s√™nior em direito m√©dico e da sa√∫de.",
        "Forne√ßa an√°lises jur√≠dicas detalhadas APENAS sobre:",
        "- Direito m√©dico e da sa√∫de",
        "- Casos complexos de responsabilidade m√©dica",
        "- An√°lise de jurisprud√™ncia em sa√∫de",
        "- Pareceres t√©cnicos em direito m√©dico",
        "- Compliance em sa√∫de",
        "- Contratos m√©dicos e hospitalares",
        "- Direito sanit√°rio",
        "",
        "Para temas fora do direito m√©dico/sa√∫de, responda:",
        "'Minha especialidade √© exclusivamente direito m√©dico e da sa√∫de. Posso ajudar apenas com quest√µes dessa √°rea.'",
        "",
        "Inclua sempre:",
        "- Base legal espec√≠fica",
        "- Jurisprud√™ncia relevante quando poss√≠vel",
        "- Aspectos pr√°ticos e preventivos",
        "- Estruture a resposta de forma organizada",
        "- Use linguagem t√©cnica mas acess√≠vel"
    ],
    markdown=True,
    show_tool_calls=False,
)

# Comentado temporariamente para debug
# class InputData(BaseModel):
#     question: str


@app.get("/")
async def root():
    return {
        "message": "Sara - Especialista em Direito M√©dico e da Sa√∫de", 
        "description": "Assistente especializada em direito m√©dico, responsabilidade civil m√©dica, √©tica m√©dica, direito do paciente e legisla√ß√£o em sa√∫de.",
        "endpoints": {
            "/ask": "Consultas b√°sicas em direito m√©dico",
            "/ask-pro": "An√°lises jur√≠dicas complexas em direito m√©dico", 
            "/especialidades": "√Åreas de especializa√ß√£o"
        },
        "example_curl": "curl -X POST http://127.0.0.1:80/ask -H 'Content-Type: application/json' -d '{\"question\": \"Quais s√£o os requisitos do consentimento informado?\"}'"
    }


@app.get("/especialidades")
async def especialidades():
    return {
        "areas_especializacao": [
            "Direito m√©dico",
            "Direito da sa√∫de", 
            "Responsabilidade civil m√©dica",
            "Erro m√©dico",
            "Consentimento informado",
            "Prontu√°rio m√©dico",
            "Sigilo m√©dico",
            "√âtica m√©dica",
            "Legisla√ß√£o em sa√∫de",
            "Regulamenta√ß√£o de profiss√µes da sa√∫de",
            "Direito do paciente",
            "Planos de sa√∫de",
            "Vigil√¢ncia sanit√°ria",
            "Bio√©tica e biodireito"
        ]
    }


@app.post("/ask")
async def ask_sara(request: Request):
    """Consulta com Sara - Especialista em Direito M√©dico"""
    try:
        # Log completo do que estamos recebendo
        body = await request.body()
        logger.info(f"üì• DADOS RAW RECEBIDOS:")
        logger.info(f"   - Body raw: {body}")
        logger.info(f"   - Content-Type: {request.headers.get('content-type')}")
        logger.info(f"   - Headers: {dict(request.headers)}")
        
        try:
            data = await request.json()
            logger.info(f"   - JSON parsed: {data}")
            logger.info(f"   - Tipo do data: {type(data)}")
            logger.info(f"   - Chaves dispon√≠veis: {list(data.keys()) if isinstance(data, dict) else 'N√£o √© dict'}")
        except Exception as json_error:
            logger.error(f"   - Erro ao fazer parse JSON: {json_error}")
            return {"error": "Dados recebidos n√£o s√£o JSON v√°lido", "raw_data": body.decode()}
        
        # Tentar extrair a pergunta de diferentes campos poss√≠veis
        question = None
        possible_fields = ["question", "message", "text", "body", "content", "query"]
        
        for field in possible_fields:
            if isinstance(data, dict) and field in data:
                question = data[field]
                logger.info(f"   - Pergunta encontrada no campo '{field}': {question}")
                break
        
        if not question:
            logger.warning(f"   - Nenhuma pergunta encontrada nos campos: {possible_fields}")
            return {
                "error": "Pergunta n√£o encontrada", 
                "received_data": data,
                "available_fields": list(data.keys()) if isinstance(data, dict) else None,
                "hint": "Envie a pergunta em um dos campos: " + ", ".join(possible_fields)
            }
        
        logger.info(f"   - Pergunta final: {question}")
        logger.info(f"   - Tamanho: {len(str(question))} caracteres")
        
        # Enviar para Sara
        logger.info("‚öñÔ∏è Sara analisando a quest√£o jur√≠dica...")
        response = sara.run(str(question))
        
        # Extrair apenas o conte√∫do da mensagem
        message = response.content if hasattr(response, 'content') else str(response)
        
        logger.info(f"‚úÖ Sara respondeu com sucesso (tamanho: {len(message)} caracteres)")
        
        return {"message": message, "specialist": "Sara - Direito M√©dico"}
    except Exception as e:
        logger.error(f"‚ùå Erro na consulta com Sara: {str(e)}")
        return {"error": f"Erro ao processar consulta: {str(e)}"}


@app.post("/ask-pro")
async def ask_sara_pro(request: Request):
    """An√°lise jur√≠dica complexa com Sara Pro"""
    try:
        # Log completo do que estamos recebendo
        body = await request.body()
        logger.info(f"üì• DADOS RAW RECEBIDOS (PRO):")
        logger.info(f"   - Body raw: {body}")
        logger.info(f"   - Content-Type: {request.headers.get('content-type')}")
        logger.info(f"   - Headers: {dict(request.headers)}")
        
        try:
            data = await request.json()
            logger.info(f"   - JSON parsed: {data}")
            logger.info(f"   - Tipo do data: {type(data)}")
            logger.info(f"   - Chaves dispon√≠veis: {list(data.keys()) if isinstance(data, dict) else 'N√£o √© dict'}")
        except Exception as json_error:
            logger.error(f"   - Erro ao fazer parse JSON: {json_error}")
            return {"error": "Dados recebidos n√£o s√£o JSON v√°lido", "raw_data": body.decode()}
        
        # Tentar extrair a pergunta de diferentes campos poss√≠veis
        question = None
        possible_fields = ["question", "message", "text", "body", "content", "query"]
        
        for field in possible_fields:
            if isinstance(data, dict) and field in data:
                question = data[field]
                logger.info(f"   - Pergunta encontrada no campo '{field}': {question}")
                break
        
        if not question:
            logger.warning(f"   - Nenhuma pergunta encontrada nos campos: {possible_fields}")
            return {
                "error": "Pergunta n√£o encontrada", 
                "received_data": data,
                "available_fields": list(data.keys()) if isinstance(data, dict) else None,
                "hint": "Envie a pergunta em um dos campos: " + ", ".join(possible_fields)
            }
        
        logger.info(f"   - Pergunta final: {question}")
        logger.info(f"   - Tamanho: {len(str(question))} caracteres")
        
        # Enviar para Sara Pro
        logger.info("‚öñÔ∏è Sara Pro fazendo an√°lise jur√≠dica detalhada...")
        response = sara_pro.run(str(question))
        
        # Extrair apenas o conte√∫do da mensagem
        message = response.content if hasattr(response, 'content') else str(response)
        
        logger.info(f"‚úÖ Sara Pro finalizou an√°lise (tamanho: {len(message)} caracteres)")
        
        return {"message": message, "specialist": "Sara Pro - Direito M√©dico S√™nior"}
    except Exception as e:
        logger.error(f"‚ùå Erro na an√°lise da Sara Pro: {str(e)}")
        return {"error": f"Erro ao processar an√°lise: {str(e)}"}
