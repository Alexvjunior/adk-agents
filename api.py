import os
import logging
import requests
from fastapi import FastAPI, Request
from agno.agent import Agent
from agno.models.google import Gemini
from agno.storage.agent.sqlite import SqliteAgentStorage

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# =====================
# API com FastAPI + Agno - Sara (Direito M√©dico)
# =====================
app = FastAPI()

# Configurar a API key do Gemini
os.environ["GOOGLE_API_KEY"] = "AIzaSyD9tPWukHuZFFbSNjTNfuIbH_PQwa3uEZQ"

# Configura√ß√µes da Evolution API para enviar mensagens
EVOLUTION_API_URL = os.getenv(
    "EVOLUTION_API_URL", 
    "https://evolution-api-evolution-api.iaz7eb.easypanel.host"
)
EVOLUTION_API_KEY = os.getenv(
    "EVOLUTION_API_KEY", 
    "150066DFD0E4-43FC-82C8-75DE2B2F0ABD"
)
EVOLUTION_INSTANCE = os.getenv("EVOLUTION_INSTANCE", "Luciano")

# Configurar storage SQLite para sess√µes
storage = SqliteAgentStorage(table_name="sessions", db_file="sessions.db")

# Criar agente Sara - Especialista em Direito M√©dico
sara = Agent(
    name="Sara", 
    role="Especialista em Direito M√©dico e da Sa√∫de",
    model=Gemini(id="gemini-1.5-flash"),
    storage=storage,
    add_history_to_messages=True,
    instructions=[
        "Voc√™ √© Sara, uma advogada especialista em direito m√©dico com 15 anos "
        "de experi√™ncia.",
        "Seja calorosa, emp√°tica e demonstre interesse genu√≠no pelos casos "
        "apresentados.",
        "Trate cada pessoa como um cliente importante que merece aten√ß√£o "
        "personalizada.",
        "",
        "ü©∫ PERSONALIDADE:",
        "- Seja acolhedora e compreensiva com as situa√ß√µes m√©dicas",
        "- Demonstre preocupa√ß√£o real com os problemas apresentados",
        "- Use linguagem acess√≠vel mas sempre t√©cnica quando necess√°rio",
        "- Fa√ßa perguntas de esclarecimento quando relevante",
        "- Compartilhe experi√™ncias profissionais (de forma gen√©rica) "
        "quando apropriado",
        "",
        "‚öñÔ∏è ESPECIALIDADES (responda APENAS sobre estes temas):",
        "- Direito m√©dico e hospitalar",
        "- Responsabilidade civil m√©dica e erro m√©dico",
        "- Consentimento informado e autonomia do paciente",
        "- Prontu√°rio m√©dico e sigilo profissional",
        "- √âtica m√©dica e bio√©tica",
        "- Direito do paciente e rela√ß√£o m√©dico-paciente",
        "- Planos de sa√∫de e ANS",
        "- Vigil√¢ncia sanit√°ria e ANVISA",
        "- Legisla√ß√£o em sa√∫de (SUS, Lei 8.080/90, etc.)",
        "- Regulamenta√ß√£o profissional (CFM, CRM, etc.)",
        "",
        "üí¨ ESTILO DE COMUNICA√á√ÉO:",
        "- Comece sempre com uma sauda√ß√£o calorosa",
        "- Mostre interesse: 'Que situa√ß√£o interessante!' ou "
        "'Entendo sua preocupa√ß√£o'",
        "- Use express√µes como: 'Em minha experi√™ncia...', "
        "'J√° vi casos similares...'",
        "- Seja did√°tica: explique o 'porqu√™' das leis e regulamenta√ß√µes",
        "- Cite sempre a legisla√ß√£o espec√≠fica (C√≥digo Civil, "
        "Lei 8.080/90, etc.)",
        "- Termine com oferecimento de ajuda adicional",
        "",
        "üö´ LIMITA√á√ïES:",
        "Para temas fora do direito m√©dico, responda carinhosamente:",
        "'Que pergunta interessante! Por√©m, minha especialidade √© "
        "exclusivamente direito m√©dico e da sa√∫de. Seria um prazer "
        "ajud√°-la(o) com quest√µes relacionadas a essa √°rea. "
        "Tem alguma d√∫vida sobre direito m√©dico?'",
        "",
        "üìã ESTRUTURA DAS RESPOSTAS:",
        "1. Sauda√ß√£o emp√°tica",
        "2. Demonstra√ß√£o de interesse no caso",
        "3. Explica√ß√£o t√©cnica acess√≠vel",
        "4. Base legal espec√≠fica",
        "5. Orienta√ß√£o pr√°tica",
        "6. Oferecimento de ajuda adicional"
    ],
    markdown=True,
    show_tool_calls=False,
)

# Agente Sara Pro para an√°lises mais complexas
sara_pro = Agent(
    name="Sara Pro", 
    role="Especialista S√™nior em Direito M√©dico e da Sa√∫de",
    model=Gemini(id="gemini-1.5-pro"),
    storage=storage,
    add_history_to_messages=True,
    instructions=[
        "Voc√™ √© Sara, uma advogada s√™nior especialista em direito m√©dico "
        "com mais de 20 anos de experi√™ncia.",
        "Seja ainda mais aprofundada, anal√≠tica e demonstre sua vasta "
        "experi√™ncia profissional.",
        "Trate cada consulta como um caso complexo que merece an√°lise "
        "detalhada.",

        "üéì PERFIL PROFISSIONAL:",
        "- Advogada s√™nior com mestrado em Direito M√©dico",
        "- Experi√™ncia em grandes hospitais e planos de sa√∫de",
        "- Especialista em casos complexos e jurisprud√™ncia",
        "- Consultora em compliance m√©dico-hospitalar",
        "",
        "üîç AN√ÅLISES DETALHADAS (apenas direito m√©dico/sa√∫de):",
        "- Responsabilidade civil complexa em medicina",
        "- An√°lise de jurisprud√™ncia relevante",
        "- Pareceres t√©cnicos especializados",
        "- Compliance em sa√∫de e auditoria m√©dica",
        "- Contratos m√©dicos e hospitalares avan√ßados",
        "- Direito sanit√°rio e regulamenta√ß√£o complexa",
        "- Bio√©tica em casos controversos",
        "",
        "üíº ESTILO PROFISSIONAL S√äNIOR:",
        "- Demonstre profundidade na an√°lise",
        "- Cite jurisprud√™ncia espec√≠fica quando poss√≠vel",
        "- Use sua 'experi√™ncia': 'Em 20 anos de pr√°tica, observo que...'",
        "- Seja sistem√°tica: divida an√°lises em aspectos legais distintos",
        "- Forne√ßa orienta√ß√µes preventivas baseadas na experi√™ncia",
        "- Inclua implica√ß√µes pr√°ticas e estrat√©gicas",
        "",
        "üìä ESTRUTURA DE AN√ÅLISE S√äNIOR:",
        "1. Contextualiza√ß√£o emp√°tica do caso",
        "2. An√°lise legal estruturada por aspectos",
        "3. Jurisprud√™ncia relevante (quando aplic√°vel)",
        "4. Base normativa espec√≠fica e detalhada",
        "5. Orienta√ß√µes preventivas/estrat√©gicas",
        "6. Considera√ß√µes pr√°ticas baseadas na experi√™ncia",
        "",
        "üö´ Para temas fora do direito m√©dico:",
        "'Agrade√ßo a confian√ßa! Minha expertise est√° focada exclusivamente "
        "em direito m√©dico e da sa√∫de. Com mais de 20 anos nessa √°rea, "
        "posso oferecer an√°lises profundas sobre quest√µes m√©dico-legais. "
        "Tem algum caso ou situa√ß√£o espec√≠fica do direito m√©dico que "
        "posso analisar?'"
    ],
    markdown=True,
    show_tool_calls=False,
)


def extract_evolution_data(data):
    """Extrai dados espec√≠ficos do webhook da Evolution API"""
    try:
        # Extrair dados espec√≠ficos da Evolution API
        conversation_path = data.get('data', {}).get('message', {})
        key_path = data.get('data', {}).get('key', {})
        
        evolution_data = {
            'message': conversation_path.get('conversation', ''),
            'remote_jid': key_path.get('remoteJid', ''),
            'push_name': data.get('data', {}).get('pushName', 'Usu√°rio'),
            'timestamp': data.get('data', {}).get('messageTimestamp', 0),
            'instance': data.get('instance', ''),
            'event': data.get('event', ''),
            'message_type': data.get('data', {}).get('messageType', ''),
        }
        
        logger.info("üì± Dados Evolution extra√≠dos:")
        logger.info(f"   - Mensagem: {evolution_data['message']}")
        logger.info(f"   - RemoteJid: {evolution_data['remote_jid']}")
        logger.info(f"   - Nome: {evolution_data['push_name']}")
        logger.info(f"   - Timestamp: {evolution_data['timestamp']}")
        logger.info(f"   - Inst√¢ncia: {evolution_data['instance']}")
        
        return evolution_data
    except Exception as e:
        logger.error(f"‚ùå Erro ao extrair dados da Evolution: {e}")
        return None


async def send_whatsapp_message(remote_jid, message, instance=None):
    """Envia mensagem via Evolution API"""
    try:
        if not instance:
            instance = "Luciano"
            
        evolution_base = "https://evolution-api-evolution-api.iaz7eb.easypanel.host"
        url = f"{evolution_base}/message/sendText/{instance}"
        
        headers = {
            "Content-Type": "application/json",
            "apikey": "150066DFD0E4-43FC-82C8-75DE2B2F0ABD"
        }
        
        payload = {
            "number": remote_jid,
            "text": message
        }
        
        logger.info("üì§ Enviando mensagem via Evolution API:")
        logger.info(f"   - URL: {url}")
        logger.info(f"   - Para: {remote_jid}")
        logger.info(f"   - Mensagem: {message[:100]}...")
        
        response = requests.post(
            url, json=payload, headers=headers, timeout=30
        )
        
        if response.status_code in [200, 201]:
            logger.info("‚úÖ Mensagem enviada com sucesso!")
            logger.info(f"   - Status: {response.status_code}")
            return True
        else:
            logger.error("‚ùå Erro ao enviar mensagem:")
            logger.error(f"   - Status: {response.status_code}")
            logger.error(f"   - Resposta: {response.text}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao enviar mensagem via Evolution API: {e}")
        return False


@app.get("/")
async def root():
    return {
        "message": "Sara - Especialista em Direito M√©dico e da Sa√∫de", 
        "description": (
            "Assistente especializada em direito m√©dico, "
            "responsabilidade civil m√©dica, √©tica m√©dica, "
            "direito do paciente e legisla√ß√£o em sa√∫de."
        ),
        "endpoints": {
            "/ask": "Consultas b√°sicas em direito m√©dico",
            "/ask-pro": "An√°lises jur√≠dicas complexas em direito m√©dico", 
            "/especialidades": "√Åreas de especializa√ß√£o"
        },
        "example_curl": (
            "curl -X POST http://127.0.0.1:8080/ask "
            "-H 'Content-Type: application/json' "
            "-d '{\"question\": \"Quais s√£o os requisitos "
            "do consentimento informado?\"}'"
        ),
        "evolution_api": "Compat√≠vel com webhooks da Evolution API",
        "sessions": "Implementa hist√≥rico com SQLite storage do agno",
        "auto_reply": "Envia respostas automaticamente via Evolution API"
    }


@app.get("/especialidades")
async def especialidades():
    return {
        "areas_especializacao": [
            "Direito m√©dico",
            "Direito da sa√∫de", 
            "Responsabilidade civil m√©dica",
            "Erro m√©dico",
            "Consentimento informado",
            "Prontu√°rio m√©dico",
            "Sigilo m√©dico",
            "√âtica m√©dica",
            "Legisla√ß√£o em sa√∫de",
            "Regulamenta√ß√£o de profiss√µes da sa√∫de",
            "Direito do paciente",
            "Planos de sa√∫de",
            "Vigil√¢ncia sanit√°ria",
            "Bio√©tica e biodireito"
        ]
    }


@app.post("/ask")
async def ask_sara(request: Request):
    """Consulta com Sara - Especialista em Direito M√©dico"""
    try:
        # Log completo do que estamos recebendo
        body = await request.body()
        logger.info("üì• DADOS RAW RECEBIDOS (Evolution API):")
        logger.info(f"   - Body raw: {body}")
        content_type = request.headers.get('content-type')
        logger.info(f"   - Content-Type: {content_type}")
        
        try:
            data = await request.json()
            logger.info(f"   - JSON parsed: {data}")
        except Exception as json_error:
            logger.error(f"   - Erro ao fazer parse JSON: {json_error}")
            return {
                "error": "Dados recebidos n√£o s√£o JSON v√°lido", 
                "raw_data": body.decode()
            }
        
        # Extrair dados espec√≠ficos da Evolution API
        evolution_data = extract_evolution_data(data)
        
        if not evolution_data or not evolution_data['message']:
            logger.warning("Mensagem n√£o encontrada nos dados da Evolution")
            return {
                "error": "Mensagem n√£o encontrada", 
                "received_data": data,
                "hint": (
                    "Certifique-se de que a mensagem est√° em "
                    "data.message.conversation"
                )
            }
        
        question = evolution_data['message']
        remote_jid = evolution_data['remote_jid']
        push_name = evolution_data['push_name']
        instance = evolution_data['instance']
        
        logger.info(f"   - Pergunta final: {question}")
        logger.info(f"   - RemoteJid: {remote_jid}")
        logger.info(f"   - Nome do usu√°rio: {push_name}")
        
        # Usar session_id baseado no remote_jid
        session_id = f"evolution-{remote_jid}"
        
        # Enviar para Sara com session_id (hist√≥rico autom√°tico)
        logger.info("‚öñÔ∏è Sara analisando a quest√£o jur√≠dica...")
        response = sara.run(question, session_id=session_id)
        
        # Extrair apenas o conte√∫do da mensagem
        message = (response.content if hasattr(response, 'content') 
                   else str(response))
        
        logger.info(f"‚úÖ Sara respondeu com sucesso "
                    f"(tamanho: {len(message)} caracteres)")
        
        # Enviar resposta automaticamente via Evolution API
        send_success = await send_whatsapp_message(
            remote_jid=remote_jid, 
            message=message,
            instance=instance
        )
        
        return {
            "message": message, 
            "specialist": "Sara - Direito M√©dico",
            "user": push_name,
            "remote_jid": remote_jid,
            "session_id": session_id,
            "auto_sent": send_success,
            "evolution_instance": instance
        }
    except Exception as e:
        logger.error(f"‚ùå Erro na consulta com Sara: {str(e)}")
        return {"error": f"Erro ao processar consulta: {str(e)}"}


@app.post("/ask-pro")
async def ask_sara_pro(request: Request):
    """An√°lise jur√≠dica complexa com Sara Pro"""
    try:
        # Log completo do que estamos recebendo
        body = await request.body()
        logger.info("üì• DADOS RAW RECEBIDOS (PRO - Evolution API):")
        logger.info(f"   - Body raw: {body}")
        content_type = request.headers.get('content-type')
        logger.info(f"   - Content-Type: {content_type}")
        
        try:
            data = await request.json()
            logger.info(f"   - JSON parsed: {data}")
        except Exception as json_error:
            logger.error(f"   - Erro ao fazer parse JSON: {json_error}")
            return {
                "error": "Dados recebidos n√£o s√£o JSON v√°lido", 
                "raw_data": body.decode()
            }
        
        # Extrair dados espec√≠ficos da Evolution API
        evolution_data = extract_evolution_data(data)
        
        if not evolution_data or not evolution_data['message']:
            logger.warning("Mensagem n√£o encontrada nos dados da Evolution")
            return {
                "error": "Mensagem n√£o encontrada", 
                "received_data": data,
                "hint": (
                    "Certifique-se de que a mensagem est√° em "
                    "data.message.conversation"
                )
            }
        
        question = evolution_data['message']
        remote_jid = evolution_data['remote_jid']
        push_name = evolution_data['push_name']
        instance = evolution_data['instance']
        
        logger.info(f"   - Pergunta final: {question}")
        logger.info(f"   - RemoteJid: {remote_jid}")
        logger.info(f"   - Nome do usu√°rio: {push_name}")
        
        # Usar session_id baseado no remote_jid
        session_id = f"evolution-pro-{remote_jid}"
        
        # Enviar para Sara Pro com session_id (hist√≥rico autom√°tico)
        logger.info("‚öñÔ∏è Sara Pro fazendo an√°lise jur√≠dica detalhada...")
        response = sara_pro.run(question, session_id=session_id)
        
        # Extrair apenas o conte√∫do da mensagem
        message = (response.content if hasattr(response, 'content') 
                   else str(response))
        
        logger.info(f"‚úÖ Sara Pro finalizou an√°lise "
                    f"(tamanho: {len(message)} caracteres)")
        
        # Enviar resposta automaticamente via Evolution API
        send_success = await send_whatsapp_message(
            remote_jid=remote_jid, 
            message=message,
            instance=instance
        )
        
        return {
            "message": message, 
            "specialist": "Sara Pro - Direito M√©dico S√™nior",
            "user": push_name,
            "remote_jid": remote_jid,
            "session_id": session_id,
            "auto_sent": send_success,
            "evolution_instance": instance
        }
    except Exception as e:
        logger.error(f"‚ùå Erro na an√°lise da Sara Pro: {str(e)}")
        return {"error": f"Erro ao processar an√°lise: {str(e)}"}


