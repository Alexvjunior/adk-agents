import os
import logging
from fastapi import FastAPI, Request
from agno.agent import Agent
from agno.models.google import Gemini
from agno.storage.agent.sqlite import SqliteAgentStorage

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# =====================
# API com FastAPI + Agno - Sara (Direito M√©dico)
# =====================
app = FastAPI()

# Configurar a API key do Gemini
os.environ["GOOGLE_API_KEY"] = "AIzaSyD9tPWukHuZFFbSNjTNfuIbH_PQwa3uEZQ"

# Configurar storage SQLite para sess√µes
storage = SqliteAgentStorage(table_name="sessions", db_file="sessions.db")

# Criar agente Sara - Especialista em Direito M√©dico
sara = Agent(
    name="Sara", 
    role="Especialista em Direito M√©dico e da Sa√∫de",
    model=Gemini(id="gemini-1.5-flash"),
    storage=storage,
    add_history_to_messages=True,
    instructions=[
        "Voc√™ √© Sara, uma especialista em direito m√©dico e da sa√∫de.",
        "Responda APENAS perguntas relacionadas a:",
        "- Direito m√©dico",
        "- Direito da sa√∫de",
        "- Responsabilidade civil m√©dica",
        "- Erro m√©dico",
        "- Consentimento informado",
        "- Prontu√°rio m√©dico",
        "- Sigilo m√©dico",
        "- √âtica m√©dico",
        "- Legisla√ß√£o em sa√∫de",
        "- Regulamenta√ß√£o de profiss√µes da sa√∫de",
        "- Direito do paciente",
        "- Planos de sa√∫de",
        "- Vigil√¢ncia sanit√°ria",
        "- Bio√©tica e biodireito",
        "",
        "Para perguntas fora desses temas, responda:",
        "'Desculpe, sou especializada apenas em direito m√©dico e da sa√∫de. "
        "Por favor, fa√ßa perguntas relacionadas a esses temas.'",
        "",
        "Sempre cite a legisla√ß√£o brasileira quando aplic√°vel "
        "(C√≥digo Civil, C√≥digo de √âtica M√©dica, Lei 8.080/90, etc.)",
        "Seja precisa, t√©cnica e did√°tica nas explica√ß√µes.",
        "Use exemplos pr√°ticos quando apropriado."
    ],
    markdown=True,
    show_tool_calls=False,
)

# Agente Sara Pro para an√°lises mais complexas
sara_pro = Agent(
    name="Sara Pro", 
    role="Especialista S√™nior em Direito M√©dico e da Sa√∫de",
    model=Gemini(id="gemini-1.5-pro"),
    storage=storage,
    add_history_to_messages=True,
    instructions=[
        "Voc√™ √© Sara Pro, uma especialista s√™nior em direito m√©dico "
        "e da sa√∫de.",
        "Forne√ßa an√°lises jur√≠dicas detalhadas APENAS sobre:",
        "- Direito m√©dico e da sa√∫de",
        "- Casos complexos de responsabilidade m√©dica",
        "- An√°lise de jurisprud√™ncia em sa√∫de",
        "- Pareceres t√©cnicos em direito m√©dico",
        "- Compliance em sa√∫de",
        "- Contratos m√©dicos e hospitalares",
        "- Direito sanit√°rio",
        "",
        "Para temas fora do direito m√©dico/sa√∫de, responda:",
        "'Minha especialidade √© exclusivamente direito m√©dico e da sa√∫de. "
        "Posso ajudar apenas com quest√µes dessa √°rea.'",
        "",
        "Inclua sempre:",
        "- Base legal espec√≠fica",
        "- Jurisprud√™ncia relevante quando poss√≠vel",
        "- Aspectos pr√°ticos e preventivos",
        "- Estruture a resposta de forma organizada",
        "- Use linguagem t√©cnica mas acess√≠vel"
    ],
    markdown=True,
    show_tool_calls=False,
)


def extract_evolution_data(data):
    """Extrai dados espec√≠ficos do webhook da Evolution API"""
    try:
        # Extrair dados espec√≠ficos da Evolution API
        conversation_path = data.get('data', {}).get('message', {})
        key_path = data.get('data', {}).get('key', {})
        
        evolution_data = {
            'message': conversation_path.get('conversation', ''),
            'remote_jid': key_path.get('remoteJid', ''),
            'push_name': data.get('data', {}).get('pushName', 'Usu√°rio'),
            'timestamp': data.get('data', {}).get('messageTimestamp', 0),
            'instance': data.get('instance', ''),
            'event': data.get('event', ''),
            'message_type': data.get('data', {}).get('messageType', ''),
        }
        
        logger.info("üì± Dados Evolution extra√≠dos:")
        logger.info(f"   - Mensagem: {evolution_data['message']}")
        logger.info(f"   - RemoteJid: {evolution_data['remote_jid']}")
        logger.info(f"   - Nome: {evolution_data['push_name']}")
        logger.info(f"   - Timestamp: {evolution_data['timestamp']}")
        logger.info(f"   - Inst√¢ncia: {evolution_data['instance']}")
        
        return evolution_data
    except Exception as e:
        logger.error(f"‚ùå Erro ao extrair dados da Evolution: {e}")
        return None


@app.get("/")
async def root():
    return {
        "message": "Sara - Especialista em Direito M√©dico e da Sa√∫de", 
        "description": (
            "Assistente especializada em direito m√©dico, "
            "responsabilidade civil m√©dica, √©tica m√©dica, "
            "direito do paciente e legisla√ß√£o em sa√∫de."
        ),
        "endpoints": {
            "/ask": "Consultas b√°sicas em direito m√©dico",
            "/ask-pro": "An√°lises jur√≠dicas complexas em direito m√©dico", 
            "/especialidades": "√Åreas de especializa√ß√£o"
        },
        "example_curl": (
            "curl -X POST http://127.0.0.1:8080/ask "
            "-H 'Content-Type: application/json' "
            "-d '{\"question\": \"Quais s√£o os requisitos "
            "do consentimento informado?\"}'"
        ),
        "evolution_api": "Compat√≠vel com webhooks da Evolution API",
        "sessions": "Implementa hist√≥rico com SQLite storage do agno"
    }


@app.get("/especialidades")
async def especialidades():
    return {
        "areas_especializacao": [
            "Direito m√©dico",
            "Direito da sa√∫de", 
            "Responsabilidade civil m√©dica",
            "Erro m√©dico",
            "Consentimento informado",
            "Prontu√°rio m√©dico",
            "Sigilo m√©dico",
            "√âtica m√©dica",
            "Legisla√ß√£o em sa√∫de",
            "Regulamenta√ß√£o de profiss√µes da sa√∫de",
            "Direito do paciente",
            "Planos de sa√∫de",
            "Vigil√¢ncia sanit√°ria",
            "Bio√©tica e biodireito"
        ]
    }


@app.post("/ask")
async def ask_sara(request: Request):
    """Consulta com Sara - Especialista em Direito M√©dico"""
    try:
        # Log completo do que estamos recebendo
        body = await request.body()
        logger.info("üì• DADOS RAW RECEBIDOS (Evolution API):")
        logger.info(f"   - Body raw: {body}")
        content_type = request.headers.get('content-type')
        logger.info(f"   - Content-Type: {content_type}")
        
        try:
            data = await request.json()
            logger.info(f"   - JSON parsed: {data}")
        except Exception as json_error:
            logger.error(f"   - Erro ao fazer parse JSON: {json_error}")
            return {
                "error": "Dados recebidos n√£o s√£o JSON v√°lido", 
                "raw_data": body.decode()
            }
        
        # Extrair dados espec√≠ficos da Evolution API
        evolution_data = extract_evolution_data(data)
        
        if not evolution_data or not evolution_data['message']:
            logger.warning("Mensagem n√£o encontrada nos dados da Evolution")
            return {
                "error": "Mensagem n√£o encontrada", 
                "received_data": data,
                "hint": (
                    "Certifique-se de que a mensagem est√° em "
                    "data.message.conversation"
                )
            }
        
        question = evolution_data['message']
        remote_jid = evolution_data['remote_jid']
        push_name = evolution_data['push_name']
        
        logger.info(f"   - Pergunta final: {question}")
        logger.info(f"   - RemoteJid: {remote_jid}")
        logger.info(f"   - Nome do usu√°rio: {push_name}")
        
        # Usar session_id baseado no remote_jid
        session_id = f"evolution-{remote_jid}"
        
        # Enviar para Sara com session_id (hist√≥rico autom√°tico)
        logger.info("‚öñÔ∏è Sara analisando a quest√£o jur√≠dica...")
        response = sara.run(question, session_id=session_id)
        
        # Extrair apenas o conte√∫do da mensagem
        message = (response.content if hasattr(response, 'content') 
                   else str(response))
        
        logger.info(f"‚úÖ Sara respondeu com sucesso "
                    f"(tamanho: {len(message)} caracteres)")
        
        return {
            "message": message, 
            "specialist": "Sara - Direito M√©dico",
            "user": push_name,
            "remote_jid": remote_jid,
            "session_id": session_id
        }
    except Exception as e:
        logger.error(f"‚ùå Erro na consulta com Sara: {str(e)}")
        return {"error": f"Erro ao processar consulta: {str(e)}"}


@app.post("/ask-pro")
async def ask_sara_pro(request: Request):
    """An√°lise jur√≠dica complexa com Sara Pro"""
    try:
        # Log completo do que estamos recebendo
        body = await request.body()
        logger.info("üì• DADOS RAW RECEBIDOS (PRO - Evolution API):")
        logger.info(f"   - Body raw: {body}")
        content_type = request.headers.get('content-type')
        logger.info(f"   - Content-Type: {content_type}")
        
        try:
            data = await request.json()
            logger.info(f"   - JSON parsed: {data}")
        except Exception as json_error:
            logger.error(f"   - Erro ao fazer parse JSON: {json_error}")
            return {
                "error": "Dados recebidos n√£o s√£o JSON v√°lido", 
                "raw_data": body.decode()
            }
        
        # Extrair dados espec√≠ficos da Evolution API
        evolution_data = extract_evolution_data(data)
        
        if not evolution_data or not evolution_data['message']:
            logger.warning("Mensagem n√£o encontrada nos dados da Evolution")
            return {
                "error": "Mensagem n√£o encontrada", 
                "received_data": data,
                "hint": (
                    "Certifique-se de que a mensagem est√° em "
                    "data.message.conversation"
                )
            }
        
        question = evolution_data['message']
        remote_jid = evolution_data['remote_jid']
        push_name = evolution_data['push_name']
        
        logger.info(f"   - Pergunta final: {question}")
        logger.info(f"   - RemoteJid: {remote_jid}")
        logger.info(f"   - Nome do usu√°rio: {push_name}")
        
        # Usar session_id baseado no remote_jid
        session_id = f"evolution-pro-{remote_jid}"
        
        # Enviar para Sara Pro com session_id (hist√≥rico autom√°tico)
        logger.info("‚öñÔ∏è Sara Pro fazendo an√°lise jur√≠dica detalhada...")
        response = sara_pro.run(question, session_id=session_id)
        
        # Extrair apenas o conte√∫do da mensagem
        message = (response.content if hasattr(response, 'content') 
                   else str(response))
        
        logger.info(f"‚úÖ Sara Pro finalizou an√°lise "
                    f"(tamanho: {len(message)} caracteres)")
        
        return {
            "message": message, 
            "specialist": "Sara Pro - Direito M√©dico S√™nior",
            "user": push_name,
            "remote_jid": remote_jid,
            "session_id": session_id
        }
    except Exception as e:
        logger.error(f"‚ùå Erro na an√°lise da Sara Pro: {str(e)}")
        return {"error": f"Erro ao processar an√°lise: {str(e)}"}


