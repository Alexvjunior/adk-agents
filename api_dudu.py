import os
import logging
import json
import tempfile
import sqlite3
import csv
import asyncio
from datetime import datetime
from collections import defaultdict
from typing import Dict, List
from dotenv import load_dotenv
from fastapi import FastAPI, Request, UploadFile, File
from agno.agent import Agent
from agno.models.openai import OpenAIChat
from agno.storage.agent.sqlite import SqliteAgentStorage
from agno.tools.knowledge import KnowledgeTools
from agno.tools.googlecalendar import GoogleCalendarTools
from agno.tools.shell import ShellTools
from agno.document.chunking.recursive import RecursiveChunking
from agno.knowledge.agent import AgentKnowledge
from agno.vectordb.chroma import ChromaDb
from agno.document.reader.text_reader import TextReader
from agno.embedder.openai import OpenAIEmbedder  # Mudan√ßa para OpenAI
from pathlib import Path
from evolution_api_tools import EvolutionApiTools

# Carregar vari√°veis de ambiente
load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()


# Inicializar banco de dados para restaurantes
def init_restaurant_db():
    """Inicializa o banco de dados de restaurantes"""
    conn = sqlite3.connect("restaurantes.db")
    cursor = conn.cursor()
    
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS restaurantes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nome TEXT NOT NULL,
            numero TEXT NOT NULL UNIQUE,
            primeira_mensagem_enviada BOOLEAN DEFAULT FALSE,
            data_envio DATETIME,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)
    
    conn.commit()
    conn.close()
    logger.info("‚úÖ Banco de dados de restaurantes inicializado")


# Inicializar DB na importa√ß√£o
init_restaurant_db()


# Usar vari√°vel de ambiente para Google API Key
google_api_key = os.getenv("GOOGLE_API_KEY", 
                           "AIzaSyCKTbPQDtAhUI9VWQH26_v2KJW3146Xe20")
os.environ["GOOGLE_API_KEY"] = google_api_key

# Configurar OpenAI API Key
openai_api_key = os.getenv("OPENAI_API_KEY")
if not openai_api_key:
    logger.error("‚ùå OPENAI_API_KEY n√£o configurada!")
else:
    os.environ["OPENAI_API_KEY"] = openai_api_key
    logger.info("‚úÖ OpenAI API Key configurada")

storage = SqliteAgentStorage(table_name="sessions", db_file="sessions.db")

# üöÄ SISTEMA DE CONHECIMENTO OTIMIZADO - Usando embeddings da OpenAI
agent_knowledge = AgentKnowledge(
    vector_db=ChromaDb(
        collection="elo_marketing_knowledge",
        embedder=OpenAIEmbedder(
            id="text-embedding-3-large",  # Modelo mais avan√ßado da OpenAI
            api_key=os.environ.get("OPENAI_API_KEY"),
            dimensions=3072,  # Dimens√µes m√°ximas para melhor precis√£o
        ),
        path="knowledge_db",
        persistent_client=True,
    ),
    chunking_strategy=RecursiveChunking(
        chunk_size=800,  # Otimizado para o modelo
        overlap=200,     # Maior overlap para melhor contexto
    ),
    num_documents=10,  # Aumentado para mais contexto
)


def load_knowledge_base_safely():
    """
    Carrega documentos do knowledge base de forma segura,
    evitando rate limiting da API da OpenAI
    """
    import time

    reader = TextReader(chunk=True)
    knowledge_dir = Path("knowledge/")
    
    if not knowledge_dir.exists():
        logger.warning("‚ö†Ô∏è Diret√≥rio 'knowledge/' n√£o encontrado")
        return
    
    # Listar todos os arquivos para processar
    files_to_process = []
    for file_path in knowledge_dir.iterdir():
        if file_path.is_file() and file_path.suffix in ['.txt', '.md']:
            files_to_process.append(file_path)
    
    if not files_to_process:
        logger.info("üìÇ Nenhum arquivo encontrado na pasta knowledge/")
        return
    
    logger.info(f"üìö Encontrados {len(files_to_process)} arquivos "
                f"para processar")
    
    # Processar arquivos com rate limiting
    processed_count = 0
    for i, file_path in enumerate(files_to_process):
        try:
            logger.info(f"üìÑ Processando arquivo {i+1}/"
                        f"{len(files_to_process)}: {file_path.name}")
            
            # Verificar se j√° existe no banco vetorial
            # (apenas ap√≥s collection existir)
            try:
                existing_docs = agent_knowledge.search(
                    query=f"arquivo {file_path.stem}",
                    num_documents=1
                )
                if existing_docs and len(existing_docs) > 0:
                    logger.info(f"‚úÖ Arquivo {file_path.name} j√° foi "
                                f"processado anteriormente")
                    continue
            except Exception:
                # Collection pode n√£o existir ainda - isso √© normal
                logger.debug("Collection ainda n√£o existe - criando...")
                pass
            
            # Ler e processar o arquivo
            documents = reader.read(file_path)
            
            # Processar documentos em lotes pequenos
            batch_size = 2  # Processar 2 documentos por vez
            for batch_start in range(0, len(documents), batch_size):
                batch_end = min(batch_start + batch_size, len(documents))
                batch_docs = documents[batch_start:batch_end]
                
                for doc in batch_docs:
                    try:
                        # Verificar se documento tem atributo meta
                        if not hasattr(doc, 'meta') or doc.meta is None:
                            doc.meta = {}
                        
                        # Adicionar metadados
                        doc.meta["source_file"] = file_path.name
                        doc.meta["processed_at"] = time.strftime(
                            "%Y-%m-%d %H:%M:%S"
                        )
                        
                        agent_knowledge.add_document_to_knowledge_base(
                            document=doc
                        )
                        processed_count += 1
                        
                        # Rate limiting: pausa entre documentos
                        time.sleep(0.5)  # 500ms entre documentos
                        
                    except Exception as doc_error:
                        logger.error(f"‚ùå Erro ao processar documento: "
                                     f"{doc_error}")
                        continue
                
                # Pausa maior entre lotes
                if batch_end < len(documents):
                    logger.info(f"‚è∏Ô∏è Pausa... {batch_end}/{len(documents)} "
                                f"processados")
                    time.sleep(2.0)  # 2 segundos entre lotes
            
            logger.info(f"‚úÖ Arquivo {file_path.name} processado")
            
            # Pausa entre arquivos
            if i < len(files_to_process) - 1:
                logger.info("‚è∏Ô∏è Pausa entre arquivos...")
                time.sleep(3.0)  # 3 segundos entre arquivos
                
        except Exception as file_error:
            logger.error(f"‚ùå Erro ao processar {file_path.name}: "
                         f"{file_error}")
            continue
    
    logger.info(f"üéâ Knowledge base carregado! "
                f"Documentos processados: {processed_count}")


# Carregar knowledge base de forma ass√≠ncrona (n√£o bloquear a inicializa√ß√£o)
try:
    logger.info("üöÄ Iniciando carregamento do knowledge base...")
    load_knowledge_base_safely()
except Exception as e:
    logger.error(f"‚ö†Ô∏è Erro no carregamento do knowledge base: {e}")
    logger.info("üìù Sistema continuar√° funcionando sem o knowledge base "
                "completo")


# üîß FERRAMENTAS DE CONHECIMENTO - Usando o mesmo sistema
knowledge_tools = KnowledgeTools(
    knowledge=agent_knowledge,  # Usando o mesmo sistema do agente
    think=True,
    search=True,
    analyze=True,
    instructions=(
        "Use sempre as conversas reais para responder perguntas. "
        "Procure por respostas espec√≠ficas no knowledge base antes de "
        "responder. Priorize informa√ß√µes precisas e atualizadas."
    ),
)


def create_google_calendar_tools():
    """Cria GoogleCalendarTools usando vari√°veis de ambiente"""
    try:
        # Criar estrutura de credenciais a partir de vari√°veis de ambiente
        credentials_dict = {
            "installed": {
                "client_id": os.getenv("GOOGLE_CLIENT_ID"),
                "project_id": os.getenv("GOOGLE_PROJECT_ID"),
                "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                "token_uri": "https://oauth2.googleapis.com/token",
                "auth_provider_x509_cert_url": (
                    "https://www.googleapis.com/oauth2/v1/certs"
                ),
                "client_secret": os.getenv("GOOGLE_CLIENT_SECRET"),
                "redirect_uris": [
                    "http://localhost", 
                    "https://agentes-agents.iaz7eb.easypanel.host/"
                ]
            }
        }
        
        # Criar estrutura de token a partir de vari√°veis de ambiente
        token_dict = {
            "refresh_token": os.getenv("GOOGLE_REFRESH_TOKEN"),
            "token_uri": "https://oauth2.googleapis.com/token",
            "client_id": os.getenv("GOOGLE_CLIENT_ID"),
            "client_secret": os.getenv("GOOGLE_CLIENT_SECRET"),
            "scopes": ["https://www.googleapis.com/auth/calendar"],
            "universe_domain": "googleapis.com"
        }
        
        # Criar arquivos tempor√°rios para as credenciais
        with tempfile.NamedTemporaryFile(
            mode='w', suffix='.json', delete=False
        ) as credentials_file:
            json.dump(credentials_dict, credentials_file)
            credentials_path = credentials_file.name
            
        with tempfile.NamedTemporaryFile(
            mode='w', suffix='.json', delete=False
        ) as token_file:
            json.dump(token_dict, token_file)
            token_path = token_file.name
        
        # Criar e retornar GoogleCalendarTools
        return GoogleCalendarTools(
            credentials_path=credentials_path,
            token_path=token_path,
        )
        
    except Exception as e:
        logger.error(f"Erro ao criar GoogleCalendarTools: {e}")
        # Retorna None se houver erro, para o agente funcionar sem calend√°rio
        return None


# Criar ferramentas de calend√°rio usando vari√°veis de ambiente
calendar = create_google_calendar_tools()

# Ferramenta Shell para executar comandos (obter data/hora atual)
shell_tools = ShellTools(base_dir=Path("."))

# Criar ferramentas Evolution API para WhatsApp
try:
    evolution_tools = EvolutionApiTools(
        server_url='https://evolution-api-evolution-api.iaz7eb.easypanel.host',
        api_key='88B69AFEDA22-4836-858D-72852AA04B1F',
        instance='Dudu Numero N√£o Usando'
    )
    logger.info("Evolution API Tools configurado com sucesso")
except Exception as e:
    logger.error(f"Erro ao configurar Evolution API Tools: {e}")
    evolution_tools = None

# Definir ferramentas baseado na disponibilidade do calend√°rio
tools = [shell_tools, knowledge_tools]
if calendar:
    tools.append(calendar)
    logger.info("Google Calendar configurado com sucesso")
else:
    warning_msg = ("Google Calendar n√£o configurado - "
                   "verifique as vari√°veis de ambiente")
    logger.warning(warning_msg)

# Adicionar Evolution API Tools se dispon√≠vel
if evolution_tools:
    # Configurar ferramentas para execu√ß√£o direta
    evolution_tools.external_execution_required_tools = []
    tools.append(evolution_tools)
    logger.info("Evolution API Tools adicionado ao agente")
    # Debug: Log available methods
    logger.info(f"üîß M√©todos dispon√≠veis nas ferramentas: "
                f"{dir(evolution_tools)}")
    logger.info(f"üîß Fun√ß√µes das ferramentas: {evolution_tools.functions}")
else:
    logger.error("‚ùå Evolution API Tools n√£o est√° dispon√≠vel")


# üöÄ SISTEMA DE DEBOUNCE PARA MENSAGENS CONSECUTIVAS
# Evita processamento individual de mensagens enviadas rapidamente
user_message_queues: Dict[str, List] = defaultdict(list)
user_timers: Dict[str, asyncio.Task] = {}
DEBOUNCE_DELAY = 5.0  # 5 segundos para aguardar mensagens consecutivas


async def process_user_messages_batch(user_id: str, whatsapp_number: str):
    """
    Processa todas as mensagens acumuladas de um usu√°rio em lote
    """
    try:
        # Aguardar o delay de debounce
        await asyncio.sleep(DEBOUNCE_DELAY)
        
        # Pegar todas as mensagens acumuladas
        if (user_id not in user_message_queues or 
                not user_message_queues[user_id]):
            return
            
        messages = user_message_queues[user_id].copy()
        user_message_queues[user_id].clear()
        
        logger.info(f"üîÑ Processando {len(messages)} mensagens em lote "
                    f"para {user_id}")
        
        # Combinar todas as mensagens
        combined_texts = []
        push_name = "Cliente"
        
        for msg in messages:
            if msg.get('text'):
                combined_texts.append(msg['text'])
            if msg.get('push_name'):
                push_name = msg['push_name']
        
        if not combined_texts:
            logger.warning("‚ö†Ô∏è Nenhuma mensagem de texto para processar")
            return
            
        combined_text = " | ".join(combined_texts)
        last_message = messages[-1]
        
        # Criar instru√ß√µes din√¢micas para processamento em lote
        dynamic_instructions = f"""
CONTEXTO ATUAL:
- Cliente: {push_name}
- N√∫mero WhatsApp: {whatsapp_number}
- Total de mensagens recebidas consecutivamente: {len(messages)}

üì¢ IMPORTANTE: O cliente enviou {len(messages)} mensagens seguidas:
{' | '.join([f'"{text}"' for text in combined_texts])}

ANALISE TODAS as informa√ß√µes juntas e responda UMA √öNICA VEZ 
via send_text_message!

üîç DETEC√á√ÉO DE DADOS DE AGENDAMENTO:
Se as mensagens cont√™m nome + restaurante + email:
‚Üí PROCESSE o agendamento imediatamente
‚Üí Use create_event() com os dados fornecidos
‚Üí Confirme via send_text_message

üîÑ DETEC√á√ÉO DE MUDAN√áAS DE AGENDAMENTO:
Se mensagens pedem mudan√ßa de hor√°rio:
‚Üí EXECUTE list_events() para verificar agenda
‚Üí RESPONDA DEFINITIVAMENTE se conseguiu ou n√£o
‚Üí Use update_event() se dispon√≠vel o novo hor√°rio
‚Üí NUNCA diga "vou verificar" - VERIFIQUE e RESPONDA!

üö® VERIFICA√á√ÉO OBRIGAT√ìRIA DE AGENDA:
Para QUALQUER agendamento (novo ou mudan√ßa):
‚Üí SEMPRE execute list_events() PRIMEIRO
‚Üí ANALISE os eventos retornados
‚Üí IDENTIFIQUE hor√°rios livres sem conflitos
‚Üí NUNCA sugira hor√°rios ocupados
‚Üí S√ì ofere√ßa hor√°rios DISPON√çVEIS

üö® SEMPRE SEJA ATIVO E COMERCIAL:
- Mencione resultados (R$ 877.000, 30%)
- Busque marcar reuni√£o com Eduardo
- Use frases diretas: "Posso agendar hoje?"
- NUNCA seja passivo

üõ°Ô∏è TRATAMENTO DE OBJE√á√ïES:
Se detectar obje√ß√£o ("n√£o √© o momento", "vou pensar"):
‚Üí N√ÉO desista! Fa√ßa 2 tentativas educadas
‚Üí Mostre material adicional (outras imagens)
‚Üí Entenda a obje√ß√£o e contorne
‚Üí Ofere√ßa conversa sem compromisso

üñºÔ∏è ENVIO DE IMAGENS (quando relevante):
Para resultados financeiros: relatorio.jpg
Para crescimento: visualizacao.jpg

Use send_text_message(number='{whatsapp_number}', 
text='sua_resposta_completa')

üö® REGRA CR√çTICA: SEMPRE use send_text_message para TODA resposta!

{last_message.get('original_instructions', '')}
"""
        
        # Processar com o agente
        message_with_context = (
            f"{dynamic_instructions}\n\n"
            f"MENSAGENS DO CLIENTE: {combined_text}"
        )
        
        session_id = f"elo-{last_message['remote_jid']}"
        
        logger.info(f"ü§ñ Enviando para agente: sess√£o {session_id}")
        response = vanessa.run(message_with_context, session_id=session_id)
        
        logger.info(f"‚úÖ Processamento em lote conclu√≠do para {user_id}")
        
        if hasattr(response, 'content') and response.content:
            logger.info(f"üìù Resposta do agente: {response.content[:100]}...")
        
        if hasattr(response, 'tool_calls') and response.tool_calls:
            logger.info(f"üîß Tool calls executados: {len(response.tool_calls)}")
        
    except asyncio.CancelledError:
        logger.info(f"‚èπÔ∏è Processamento cancelado para {user_id} "
                    f"(nova mensagem recebida)")
    except Exception as e:
        logger.error(f"‚ùå Erro no processamento em lote para {user_id}: {e}")
    finally:
        # Limpar timer da lista
        if user_id in user_timers:
            del user_timers[user_id]


# Criar agente Vanessa - Vendedora da Elo Marketing
vanessa = Agent(
    name="Vanessa",
    role="Vendedora da Elo Marketing especializada em restaurantes",
    model=OpenAIChat(
        id="gpt-4o",  # Atualizado para GPT-4o (mais avan√ßado)
        temperature=0.7,
        max_tokens=1000,
        top_p=0.9,
        frequency_penalty=0.0,
        presence_penalty=0.0,
    ),
    storage=storage,
    tools=tools,  # Adicionado shell_tools
    knowledge=agent_knowledge,
    add_history_to_messages=True,
    tool_choice="auto",  # Voltando para "required" para garantir uso do send_text_message
    instructions=[
        "üö® REGRA CR√çTICA #1 - ENVIO OBRIGAT√ìRIO:",
        "TODA resposta que voc√™ gerar DEVE ser enviada via send_text_message do EvolutionApiTools!",
        "",
        "üö® REGRA CR√çTICA #2 - DIFEREN√áA IMPORTANTE:",
        "AGENDAMENTO REAL: Use send_text_message + ferramentas de calend√°rio",
        "",
        "üö® REGRA CR√çTICA #3 - FERRAMENTAS",
        "VOC√ä √â UM AGENTE CONECTADO NO WHATSAPP RECEBENDO EVENTOS E PARA RESPONDER O USU√ÅRIO VOC√ä DEVE USAR O EvolutionApiTools PARA RESPONDER",
        "",
        "üö® REGRA CR√çTICA #4 - SEMPRE ATIVO E COMERCIAL:",
        "EM TODA RESPOSTA, SEMPRE inclua um elemento ativo:",
        "- Mencione resultados (R$ 877.000, 30% crescimento)", 
        "- Ofere√ßa mostrar cases ou exemplos",
        "- Busque marcar reuni√£o com Eduardo",
        "- Use frases como: 'Posso agendar hoje?', 'Que tal conversarmos?'",
        "NUNCA seja passivo - SEMPRE empurre para agendamento!",
        "",
        "Voc√™ √© Vanessa, vendedora da Elo Marketing especializada em "
        "restaurantes.",
        "",
        "üìã FLUXO BASEADO NAS CONVERSAS REAIS (knowledge):",
        "",
        "SE cliente responder 'Sim, temos card√°pio' ou similar:",
        "‚Üí Use APENAS send_text_message com:",
        "'Tudo bem? üòâ Aqui √© a Vanessa. Trabalho ajudando restaurantes "
        "a atrair clientes. Nos √∫ltimos meses, ajudamos restaurantes a "
        "crescer mais de 30%, faturando R$ 877.000 em um m√™s, "
        "investindo R$ 7 mil. Posso mostrar resultados?'",
        "",
        "SE cliente pedir para ver resultados:",
        "‚Üí Use send_text_message + send_media_message (relatorio.jpg)",
        "‚Üí DEPOIS da imagem, SEMPRE envie outro send_text_message:",
        "'Esses s√£o alguns dos resultados reais! Voc√™ topa agendar "
        "um breve bate-papo com um dos nossos especialistas? "
        "Ele pode mostrar como conseguimos esses n√∫meros.'",
        "",
        "SE cliente demonstrar interesse depois dos resultados:",
        "‚Üí Use APENAS send_text_message:",
        "'Voc√™ topa agendar um breve bate-papo com nosso especialista "
        "Eduardo? Ele pode mostrar como ajudamos restaurantes.'",
        "",
        "üö® SEJA SEMPRE ATIVO E ASSERTIVO:",
        "- SEMPRE busque marcar reuni√£o ap√≥s mostrar resultados",
        "- Use frases diretas como: 'Voc√™ topa agendar?'",
        "- N√£o seja passivo dizendo 'se quiser √© s√≥ avisar'",
        "- FORCE o agendamento de forma educada mas firme",
        "- Exemplo: 'Legal! Posso agendar um hor√°rio hoje ou amanh√£?'",
        "",
        "üõ°Ô∏è TRATAMENTO DE OBJE√á√ïES - N√ÉO DESISTA F√ÅCIL:",
        "SE cliente der obje√ß√£o como 'n√£o √© o momento', 'vou pensar':",
        "üîÑ ESTRAT√âGIA DE 2 TENTATIVAS EDUCADAS:",
        "",
        "TENTATIVA 1 - Mostrar material adicional:",
        "‚Üí 'Entendo! Deixa eu mostrar s√≥ mais um caso espec√≠fico'",
        "‚Üí Envie send_media_message com visualizacao.jpg ou cases.jpg",
        "‚Üí 'Esse restaurante pensou igual, mas depois de 30 dias...'",
        "‚Üí 'Que tal s√≥ uma conversa de 15min sem compromisso?'",
        "",
        "TENTATIVA 2 - Entender e contornar:",
        "‚Üí 'Posso perguntar o que te faz hesitar? √â o investimento?'",
        "‚Üí '√â o tempo? √â receio se funciona pro seu tipo de restaurante?'", 
        "‚Üí 'Nosso especialista pode esclarecer isso em 10min'",
        "‚Üí 'Que tal uma conversa r√°pida s√≥ pra tirar d√∫vidas?'",
        "",
        "APENAS DEPOIS DAS 2 TENTATIVAS:",
        "‚Üí 'Entendo perfeitamente. Quando quiser conversar, √© s√≥ chamar!'",
        "NUNCA desista na primeira obje√ß√£o - SEMPRE tente 2 vezes!",
        "",
        "SE cliente ACEITAR EXPLICITAMENTE agendar:",
        "‚Üí APENAS ENT√ÉO use ferramentas de calend√°rio:",
        "1. shell_tools para data atual",
        "2. list_events() para agenda",
        "3. send_text_message sugerindo 2 hor√°rios",
        "4. create_event() quando cliente escolher",
        
        "üîÑ MUDAN√áAS DE AGENDAMENTO - RESPOSTA DEFINITIVA:",
        "SE cliente pedir para mudar hor√°rio existente:",
        "1. EXECUTE list_events() para verificar agenda",
        "2. VERIFIQUE se novo hor√°rio est√° dispon√≠vel",
        "3. RESPONDA DEFINITIVAMENTE:",
        "   ‚úÖ 'Perfeito! Consegui alterar para ter√ßa √†s 7h' (se dispon√≠vel)",
        "   ‚ùå 'N√£o consegui √†s 7h, mas tenho segunda √†s 8h' (se indispon√≠vel)", 
        "4. Se conseguir: EXECUTE update_event() ou create_event()",
        "5. CONFIRME via send_text_message com hor√°rio final",
        "NUNCA diga 'vou verificar' - VERIFIQUE e RESPONDA NA HORA!",
        "",
        "üö® FLUXO OBRIGAT√ìRIO DE AGENDAMENTO:",
        "üî• PASSO 1 - CONSULTAR DATA E CALEND√ÅRIO (OBRIGAT√ìRIO):",
        "ANTES de sugerir qualquer hor√°rio, SEMPRE EXECUTE:",
        "1. shell_tools com comando: ['date', '+%A, %d de %B de %Y']",
        "2. list_events() ‚Üê Esta ferramenta √© OBRIGAT√ìRIA!",
        "üö® CR√çTICO: ANALISE os eventos retornados por list_events()",
        "NUNCA sugira hor√°rios que j√° est√£o ocupados na agenda!",
        "VERIFIQUE conflitos antes de oferecer qualquer hor√°rio!",
        "",
        "üî• PASSO 2 - SUGERIR APENAS HOR√ÅRIOS LIVRES:",
        "Ap√≥s executar list_events() e VERIFICAR disponibilidade:",
        "‚Üí ANALISE quais hor√°rios est√£o livres",
        "‚Üí CONFIRME que n√£o h√° conflitos",
        "‚Üí S√ì ENT√ÉO sugira 2 hor√°rios DISPON√çVEIS via send_text_message:",
        "'Consultei a agenda! Eduardo est√° livre ter√ßa √†s 14h ou quarta √†s 10h'",
        "OU: 'Verifiquei a agenda. Temos segunda √†s 9h ou sexta √†s 15h'", 
        "OU: 'Agenda consultada! Dispon√≠vel quinta √†s 11h ou ter√ßa √†s 16h'",
        "SEMPRE mencione que consultou agenda + 2 hor√°rios LIVRES",
        "",
        "üî• PASSO 3 - COLETAR DADOS VIA WHATSAPP:",
        "Cliente escolhe hor√°rio ‚Üí Use send_text_message com:",
        "'Para finalizar, preciso: nome completo, nome do restaurante e email'",
        "COLETE TODOS os dados antes de criar o evento!",
        "",
        "üî• PASSO 4 - CRIAR EVENTO NO CALEND√ÅRIO (OBRIGAT√ìRIO):",
        "Quando tiver todos os dados, SEMPRE EXECUTE:",
        "create_event(timezone='America/Sao_Paulo', add_google_meet_link=True)",
        "NUNCA confirme agendamento sem executar create_event()!",
        "",
        "üî• PASSO 5 - CONFIRMAR VIA WHATSAPP:",
        "Ap√≥s create_event(), use send_text_message com:",
        "'Reuni√£o agendada para [data/hora]!'",
        "'Link do Google Meet: [url extra√≠do do evento criado]'",
        "'Eduardo j√° recebeu os detalhes por email'",
        "",
        "‚ùå PROIBI√á√ïES ABSOLUTAS:",
        "- JAMAIS retorne texto sem usar send_text_message",
        "- JAMAIS sugira hor√°rios sem executar list_events() primeiro",
        "- JAMAIS sugira hor√°rios ocupados - SEMPRE verifique conflitos!",
        "- JAMAIS confirme agendamento sem executar create_event()",
        "- JAMAIS diga 'Eduardo entrar√° em contato' - VOC√ä agenda!",
        "",
        "‚úÖ FLUXO CORRETO OBRIGAT√ìRIO:",
        "1. Cliente: 'quero reuni√£o' ‚Üí Voc√™: EXECUTE list_events()",
        "2. ANALISE agenda e identifique hor√°rios LIVRES",
        "3. EXECUTE send_text_message('Consultei! Livre segunda √†s 14h ou ter√ßa √†s 10h?')",
        "4. Cliente escolhe ‚Üí EXECUTE create_event() com o hor√°rio escolhido",
        "5. EXECUTE send_text_message('Agendado! Eduardo te liga [dia] √†s [hora]!')"
    ],
    markdown=True,
    show_tool_calls=True,
)


def extract_evolution_data(data):
    """Extrai dados da Evolution API"""
    try:
        # Estrutura t√≠pica da Evolution API
        if isinstance(data, dict):
            # Tentar diferentes estruturas poss√≠veis
            message = None
            audio_base64 = None
            image_base64 = None
            message_type = 'text'  # Padr√£o: texto
            remote_jid = None
            push_name = None
            instance = None

            # NOVO FORMATO 2025: Verificar se √© o novo formato com camada 'data'
            if 'data' in data and isinstance(data['data'], dict):
                payload_data = data['data']
                logger.info("üì¶ Novo formato Evolution API 2025 detectado")
                
                # Extrair mensagem do novo formato
                if ('message' in payload_data and 
                        isinstance(payload_data['message'], dict)):
                    if 'conversation' in payload_data['message']:
                        message = payload_data['message']['conversation']
                        message_type = 'text'
                    elif ('imageMessage' in payload_data['message'] and 
                          'base64' in payload_data['message']):
                        image_base64 = payload_data['message']['base64']
                        message_type = 'image'
                    elif ('audioMessage' in payload_data['message'] and 
                          'base64' in payload_data['message']):
                        audio_base64 = payload_data['message']['base64']
                        message_type = 'audio'
                
                # Extrair informa√ß√µes do remetente do novo formato
                if ('key' in payload_data and 
                        isinstance(payload_data['key'], dict)):
                    remote_jid = payload_data['key'].get('remoteJid', 
                                                         'unknown')
                
                if 'pushName' in payload_data:
                    push_name = payload_data['pushName']
                
                # Instance do payload principal
                if 'instance' in data:
                    instance = data['instance']

            # FORMATO ANTIGO: Verificar se √© o formato com 'query' e 'inputs'
            elif 'query' in data and 'inputs' in data:
                message = data['query']
                message_type = 'text'
                # Extrair informa√ß√µes de inputs
                inputs = data['inputs']
                if isinstance(inputs, dict):
                    remote_jid = inputs.get('remoteJid', 'unknown')
                    push_name = inputs.get('pushName', 'Cliente')
                    instance = inputs.get('instanceName', 'default')
                logger.info("üì¶ Formato antigo Evolution API detectado")

            # Verificar se √© mensagem de imagem (formato antigo)
            elif ('message' in data and isinstance(data['message'], dict) and
                    'imageMessage' in data['message'] and 
                    'base64' in data['message']):
                image_base64 = data['message']['base64']
                message_type = 'image'
                logger.info("üñºÔ∏è Mensagem de imagem detectada")

            # Verificar se √© mensagem de √°udio (formato antigo)
            elif ('message' in data and isinstance(data['message'], dict) and
                    'audioMessage' in data['message'] and 
                    'base64' in data['message']):
                audio_base64 = data['message']['base64']
                message_type = 'audio'
                logger.info("üìª Mensagem de √°udio detectada")

            # Op√ß√£o 1: data.message.conversation (texto) - formato antigo
            elif 'message' in data and isinstance(data['message'], dict):
                if 'conversation' in data['message']:
                    message = data['message']['conversation']
                elif 'text' in data['message']:
                    message = data['message']['text']

            # Op√ß√£o 2: data.text ou data.message direto - formato antigo
            elif 'text' in data:
                message = data['text']
            elif 'message' in data and isinstance(data['message'], str):
                message = data['message']
            elif 'question' in data:  # Para testes diretos
                message = data['question']

            # Extrair informa√ß√µes do remetente (formato antigo)
            if not remote_jid:  # S√≥ se n√£o foi definido no novo formato
                if 'key' in data and isinstance(data['key'], dict):
                    remote_jid = data['key'].get('remoteJid', 'unknown')
                elif 'from' in data:
                    remote_jid = data['from']
                elif 'user' in data:  # Novo formato pode ter 'user'
                    remote_jid = data['user']

            if not push_name:  # S√≥ se n√£o foi definido no novo formato
                if 'pushName' in data:
                    push_name = data['pushName']
                elif 'sender_name' in data:
                    push_name = data['sender_name']

            # Capturar instance ou instanceId
            if not instance:  # S√≥ se n√£o foi definido no novo formato
                if 'instanceId' in data:
                    instance = data['instanceId']
                elif 'instance' in data:
                    instance = data['instance']

            return {
                'message': message,
                'audio_base64': audio_base64,
                'image_base64': image_base64,
                'message_type': message_type,
                'remote_jid': remote_jid or 'unknown',
                'push_name': push_name or 'Cliente',
                'instance': instance or 'default'
            }

    except Exception as e:
        logger.error(f"Erro ao extrair dados da Evolution: {e}")

    return None


@app.get("/")
async def root():
    return {
        "message": "Vanessa - Vendedora Elo Marketing | Especialista em "
                   "Restaurantes",
        "description": (
            "Assistente de vendas especializada em marketing digital para "
            "restaurantes. Ajuda a captar leads qualificados e marcar "
            "reuni√µes com resultados comprovados: crescimento de 30% e "
            "faturamento de R$ 862.000 em um m√™s."
        ),
        "endpoints": {
            "/ask": "Conversa com Vanessa para capta√ß√£o de leads",
            "/status": "Status do sistema de capta√ß√£o"
        },
        "example_curl": (
            "curl -X POST http://127.0.0.1:8080/ask "
            "-H 'Content-Type: application/json' "
            "-d '{\"question\": \"Oi, √© do restaurante?\"}'"
        ),
        "evolution_api": "Compat√≠vel com webhooks da Evolution API",
        "sessions": "Hist√≥rico de conversas por cliente com SQLite",
        "objetivo": "Capta√ß√£o de leads e agendamento de reuni√µes com Eduardo",
        "script_source": "faq.txt - Base de conhecimento vetorizada com Agno",
        "knowledge_system": ("Sistema de conhecimento vetorizado para busca "
                             "sem√¢ntica no script de vendas")
    }


@app.post("/ask")
async def ask_vanessa(request: Request):
    """Conversa com Vanessa - Vendedora da Elo Marketing (com debounce)"""
    try:
        # Log completo do que estamos recebendo
        body = await request.body()
        logger.info("üì• DADOS RAW RECEBIDOS (Evolution API):")
        logger.info(f"   - Body raw: {body}")
        content_type = request.headers.get('content-type')
        logger.info(f"   - Content-Type: {content_type}")

        try:
            data = await request.json()
            logger.info(f"   - JSON parsed: {data}")
        except Exception as json_error:
            logger.error(f"   - Erro ao fazer parse JSON: {json_error}")
            return {
                "error": "Dados recebidos n√£o s√£o JSON v√°lido",
                "raw_data": body.decode()
            }

        # Extrair dados espec√≠ficos da Evolution API
        evolution_data = extract_evolution_data(data)

        if not evolution_data:
            logger.warning("Dados n√£o conseguiram ser extra√≠dos da Evolution")
            return {
                "error": "Dados n√£o conseguiram ser extra√≠dos",
                "received_data": data,
            }

        # Verificar se temos conte√∫do (texto, √°udio ou imagem)
        has_text = evolution_data['message'] is not None
        has_audio = evolution_data['audio_base64'] is not None
        has_image = evolution_data['image_base64'] is not None
        
        if not has_text and not has_audio and not has_image:
            logger.warning("Nem texto, √°udio ou imagem encontrados nos dados")
            return {
                "error": "Nem texto, √°udio ou imagem encontrados",
                "received_data": data,
                "hint": (
                    "Certifique-se de que h√° 'conversation' para texto, "
                    "'audioMessage' com 'base64' para √°udio, ou "
                    "'imageMessage' com 'base64' para imagem"
                )
            }

        remote_jid = evolution_data['remote_jid']
        push_name = evolution_data['push_name']
        message_type = evolution_data['message_type']

        logger.info(f"   - Tipo de mensagem: {message_type}")
        if has_text:
            logger.info(f"   - Texto: {evolution_data['message']}")
        if has_audio:
            audio_length = len(evolution_data['audio_base64'])
            logger.info(f"   - √Åudio: {audio_length} chars base64")
        if has_image:
            image_length = len(evolution_data['image_base64'])
            logger.info(f"   - Imagem: {image_length} chars base64")
        logger.info(f"   - RemoteJid: {remote_jid}")
        logger.info(f"   - Nome do usu√°rio: {push_name}")
        
        # Extrair n√∫mero do WhatsApp do remoteJid para as ferramentas
        whatsapp_number = remote_jid.replace("@s.whatsapp.net", "")
        logger.info(f"üì± N√∫mero extra√≠do para ferramentas: {whatsapp_number}")

        # üöÄ SISTEMA DE DEBOUNCE - Processar mensagens de texto em lote
        if message_type == 'text' and has_text:
            user_id = remote_jid
            
            # Criar instru√ß√µes din√¢micas originais para armazenar
            original_instructions = f"""
CONTEXTO ATUAL:
- Cliente: {push_name}
- N√∫mero WhatsApp: {whatsapp_number}

üì¢ IMPORTANTE: A pergunta sobre card√°pio online J√Å FOI ENVIADA!
Continue a conversa a partir da resposta do cliente.
N√ÉO repita: "Oi, √© do restaurante?" - v√° direto ao acompanhamento!

üÜò N√öMERO DE EMERG√äNCIA: 5548996438314
Se houver problemas t√©cnicos ou n√£o conseguir agendar, redirecione!

INSTRU√á√ïES DE FERRAMENTAS:
Quando usar send_media_message, use sempre:
- number: {whatsapp_number}
- media_type: 'image'

Para resultados financeiros (R$ 877.000):
- media: 'knowledge/relatorio.jpg'
- caption: 'Aqui est√£o os resultados reais dos nossos clientes'

Para crescimento (30%):
- media: 'knowledge/visualizacao.jpg' 
- caption: 'Visualiza√ß√£o do crescimento dos nossos clientes'

SEMPRE use as ferramentas quando mencionar resultados!
"""
            
            # Adicionar mensagem √† queue do usu√°rio
            message_data = {
                'text': evolution_data['message'],
                'remote_jid': remote_jid,
                'push_name': push_name,
                'whatsapp_number': whatsapp_number,
                'message_type': message_type,
                'original_instructions': original_instructions,
                'timestamp': datetime.now().isoformat()
            }
            
            user_message_queues[user_id].append(message_data)
            logger.info(f"‚ûï Mensagem de texto adicionada √† queue. "
                       f"Total na fila: {len(user_message_queues[user_id])}")
            
            # Cancelar timer anterior se existir
            if user_id in user_timers and not user_timers[user_id].done():
                user_timers[user_id].cancel()
                logger.info("‚èπÔ∏è Timer anterior cancelado - nova mensagem recebida")
            
            # Criar novo timer para processamento em lote
            user_timers[user_id] = asyncio.create_task(
                process_user_messages_batch(user_id, whatsapp_number)
            )
            
            logger.info(f"‚è±Ô∏è Timer de debounce iniciado ({DEBOUNCE_DELAY}s)")
            
            return {
                "message": "Mensagem de texto adicionada √† queue",
                "queue_size": len(user_message_queues[user_id]),
                "debounce_delay": DEBOUNCE_DELAY,
                "processing_mode": "batch"
            }
        
        # üéØ PROCESSAMENTO IMEDIATO para imagens e √°udio (n√£o aplicar debounce)
        else:
            logger.info("üéØ Processamento imediato (imagem/√°udio)")
            
            # Usar session_id baseado no remote_jid para manter hist√≥rico
            session_id = f"elo-{remote_jid}"
            
            # Criar instru√ß√µes din√¢micas com o n√∫mero espec√≠fico do cliente
            dynamic_instructions = f"""
CONTEXTO ATUAL:
- Cliente: {push_name}
- N√∫mero WhatsApp: {whatsapp_number}

üì¢ IMPORTANTE: A pergunta sobre card√°pio online J√Å FOI ENVIADA!
Continue a conversa a partir da resposta do cliente.
N√ÉO repita: "Oi, √© do restaurante?" - v√° direto ao acompanhamento!

üÜò N√öMERO DE EMERG√äNCIA: 5548996438314
Se houver problemas t√©cnicos ou n√£o conseguir agendar, redirecione!

INSTRU√á√ïES DE FERRAMENTAS:
üñºÔ∏è ENVIO DE IMAGENS AUTOM√ÅTICO:
Quando mencionar resultados, SEMPRE envie imagem correspondente:

Para resultados financiais (R$ 877.000):
send_media_message(number='{whatsapp_number}', media_type='image',
media='knowledge/relatorio.jpg', caption='Aqui est√£o os resultados 
reais dos nossos clientes!')

Para crescimento (30%):
send_media_message(number='{whatsapp_number}', media_type='image', 
media='knowledge/visualizacao.jpg', caption='Visualiza√ß√£o do 
crescimento dos nossos clientes!')

Para cases de sucesso:
send_media_message(number='{whatsapp_number}', media_type='image',
media='knowledge/cases.jpg', caption='Veja alguns dos nossos cases 
de sucesso!')

üéØ REGRA: SEMPRE combine send_text_message + send_media_message para 
maior impacto!

SEMPRE use as ferramentas quando mencionar resultados!
"""
        
        # Processar baseado no tipo de mensagem
        try:
            if message_type == 'image' and has_image:
                logger.info("üñºÔ∏è Processando mensagem de imagem")
                response = vanessa.run(
                    images=[evolution_data['image_base64']], 
                    session_id=session_id
                )
            elif message_type == 'audio' and has_audio:
                logger.info("üìª Processando mensagem de √°udio")
                response = vanessa.run(
                    audio=evolution_data['audio_base64'], 
                    session_id=session_id
                )
            else:
                logger.info("üìù Processando mensagem de texto (fallback)")
                message_with_context = (
                    f"{dynamic_instructions}\n\n"
                    f"MENSAGEM DO CLIENTE: {evolution_data['message']}"
                )
                response = vanessa.run(
                    message_with_context, 
                    session_id=session_id
                )
            
            logger.info(f"üîç Resposta do agente - Tipo: {type(response)}")
            if hasattr(response, 'content'):
                logger.info(f"üîç Content: {response.content}")
            if hasattr(response, 'tool_calls') and response.tool_calls:
                logger.info(f"üîß Tool calls detectados: "
                           f"{len(response.tool_calls)}")
                for i, tool_call in enumerate(response.tool_calls):
                    logger.info(f"üîß Tool call {i+1}: {tool_call}")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao executar agente: {e}")
            logger.error(f"‚ùå Tipo do erro: {type(e)}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            response = None

        # Extrair apenas o conte√∫do da mensagem com verifica√ß√£o de None
        if response is None:
            message = "Erro: Resposta vazia do agente"
        elif hasattr(response, 'content') and response.content:
            message = response.content
        elif hasattr(response, 'content') and response.content is None:
            # Agente pode ter usado ferramentas sem retornar texto
            message = "Perfeito! Vou te enviar os materiais de comprova√ß√£o."
        else:
            # Fallback para outros casos
            message = "Aguarde um momento, estou processando sua solicita√ß√£o."
        
        # Garantir que message nunca seja None
        if message is None:
            message = "Erro: N√£o foi poss√≠vel obter resposta"

        logger.info(f"‚úÖ Vanessa respondeu com sucesso "
                    f"(tamanho: {len(message)} caracteres)")

        return {
                "message": "Resposta enviada via WhatsApp (processamento imediato)",
                "processing_mode": "immediate"
        }

    except Exception as e:
        logger.error(f"‚ùå Erro na conversa com Vanessa: {str(e)}")
        return {"error": f"Erro ao processar conversa: {str(e)}"}


@app.get("/status")
async def status():
    """Status do sistema de capta√ß√£o"""
    faq_exists = os.path.exists("faq.txt")

    return {
        "status": "Sistema ativo",
        "agente": "Vanessa - Elo Marketing",
        "funcionalidades": [
            "Capta√ß√£o de leads para restaurantes",
            "Base de conhecimento vetorizada",
            "Busca sem√¢ntica no script de vendas",
            "Tratamento de obje√ß√µes via FAQ",
            "Agendamento com Eduardo",
            "Hist√≥rico de conversas"
        ],
        "knowledge_system": {
            "faq_file": "faq.txt",
            "faq_loaded": faq_exists,
            "chunking_strategy": "paragraph",
            "search_method": "semantic_search"
        },
        "database": "sessions.db (SQLite)"
    }


@app.post("/test-evolution")
async def test_evolution():
    """Testa as ferramentas Evolution API diretamente"""
    try:
        if not evolution_tools:
            return {"error": "Evolution API Tools n√£o configurado"}
        
        # Teste direto das ferramentas
        result = evolution_tools.send_text_message(
            number="5548996438314",
            text="Teste direto das ferramentas Evolution API!"
        )
        
        return {
            "status": "sucesso",
            "result": result,
            "tools_available": dir(evolution_tools)
        }
    except Exception as e:
        return {"error": str(e)}


@app.post("/enviar-lista-restaurantes")
async def enviar_lista_restaurantes(file: UploadFile = File(...)):
    """
    Endpoint para processar lista de restaurantes e enviar primeira mensagem
    Formato esperado do CSV: nome,numero
    """
    try:
        # Verificar se o arquivo √© CSV
        if not file.filename.endswith('.csv'):
            return {"error": "Arquivo deve ser CSV"}
        
        # Ler conte√∫do do arquivo
        content = await file.read()
        content_str = content.decode('utf-8')
        
        # Processar CSV
        csv_reader = csv.reader(content_str.splitlines())
        restaurantes_processados = []
        restaurantes_erro = []
        
        # Mensagem primeira intera√ß√£o
        primeira_mensagem = (
            "Oi! Aqui √© a Vanessa da Elo Marketing. "
            "√â de um restaurante? Voc√™s t√™m card√°pio ou menu online?"
        )
        
        for i, row in enumerate(csv_reader):
            # Pular header se existir
            if i == 0 and ('nome' in row[0].lower() or 'name' in row[0].lower()):
                continue
                
            if len(row) < 2:
                restaurantes_erro.append({
                    "linha": i + 1,
                    "erro": "Formato inv√°lido - necess√°rio nome,numero"
                })
                continue
            
            nome = row[0].strip()
            numero = row[1].strip()
            
            # Limpar n√∫mero (remover caracteres especiais)
            numero_limpo = ''.join(filter(str.isdigit, numero))
            
            if len(numero_limpo) < 10:
                restaurantes_erro.append({
                    "linha": i + 1,
                    "nome": nome,
                    "numero": numero,
                    "erro": "N√∫mero muito curto"
                })
                continue
            
            try:
                # Salvar no banco de dados
                conn = sqlite3.connect("restaurantes.db")
                cursor = conn.cursor()
                
                # Verificar se j√° existe
                cursor.execute(
                    "SELECT id, primeira_mensagem_enviada FROM restaurantes WHERE numero = ?",
                    (numero_limpo,)
                )
                existing = cursor.fetchone()
                
                if existing:
                    if existing[1]:  # J√° enviou mensagem
                        restaurantes_erro.append({
                            "linha": i + 1,
                            "nome": nome,
                            "numero": numero_limpo,
                            "erro": "Mensagem j√° enviada anteriormente"
                        })
                        conn.close()
                        continue
                else:
                    # Inserir novo restaurante
                    cursor.execute(
                        """INSERT INTO restaurantes (nome, numero) 
                           VALUES (?, ?)""",
                        (nome, numero_limpo)
                    )
                
                # Para teste, enviar apenas para o n√∫mero especificado
                numero_envio = "5548996438314"  # N√∫mero de teste
                
                if evolution_tools:
                    try:
                        # Enviar mensagem
                        result = evolution_tools.send_text_message(
                            number=numero_envio,
                            text=f"TESTE - {nome}: {primeira_mensagem}"
                        )
                        
                        # Marcar como enviado no banco
                        cursor.execute(
                            """UPDATE restaurantes 
                               SET primeira_mensagem_enviada = TRUE, data_envio = ?
                               WHERE numero = ?""",
                            (datetime.now(), numero_limpo)
                        )
                        
                        restaurantes_processados.append({
                            "nome": nome,
                            "numero": numero_limpo,
                            "numero_teste": numero_envio,
                            "status": "enviado",
                            "result": str(result)
                        })
                        
                    except Exception as e:
                        restaurantes_erro.append({
                            "linha": i + 1,
                            "nome": nome,
                            "numero": numero_limpo,
                            "erro": f"Erro ao enviar: {str(e)}"
                        })
                else:
                    restaurantes_erro.append({
                        "linha": i + 1,
                        "nome": nome,
                        "numero": numero_limpo,
                        "erro": "Evolution API n√£o configurada"
                    })
                
                conn.commit()
                conn.close()
                
            except sqlite3.IntegrityError:
                restaurantes_erro.append({
                    "linha": i + 1,
                    "nome": nome,
                    "numero": numero_limpo,
                    "erro": "N√∫mero j√° existe no banco"
                })
            except Exception as e:
                restaurantes_erro.append({
                    "linha": i + 1,
                    "nome": nome,
                    "numero": numero,
                    "erro": str(e)
                })
        
        return {
            "status": "processado",
            "total_linhas": i + 1,
            "processados": len(restaurantes_processados),
            "erros": len(restaurantes_erro),
            "restaurantes_processados": restaurantes_processados,
            "restaurantes_erro": restaurantes_erro,
            "observacao": "MODO TESTE: Todas as mensagens foram enviadas para 5548996438314"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao processar lista de restaurantes: {e}")
        return {"error": f"Erro interno: {str(e)}"}


@app.get("/restaurantes")
async def listar_restaurantes():
    """Lista todos os restaurantes cadastrados"""
    try:
        conn = sqlite3.connect("restaurantes.db")
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT id, nome, numero, primeira_mensagem_enviada, 
                   data_envio, created_at
            FROM restaurantes 
            ORDER BY created_at DESC
        """)
        
        rows = cursor.fetchall()
        conn.close()
        
        restaurantes = []
        for row in rows:
            restaurantes.append({
                "id": row[0],
                "nome": row[1],
                "numero": row[2],
                "primeira_mensagem_enviada": bool(row[3]),
                "data_envio": row[4],
                "created_at": row[5]
            })
        
        return {
            "total": len(restaurantes),
            "restaurantes": restaurantes
        }
        
    except Exception as e:
        return {"error": str(e)}


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8082)
